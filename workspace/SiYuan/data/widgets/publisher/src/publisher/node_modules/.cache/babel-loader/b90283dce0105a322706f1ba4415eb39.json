{"ast":null,"code":"/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\nvar common = require('../common'); //\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\n\n\nvar Memory = exports.Memory = function (options) {\n  options = options || {};\n  this.type = 'memory';\n  this.store = {};\n  this.mtimes = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n  this.parseValues = options.parseValues || false;\n\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n}; //\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\n\n\nMemory.prototype.get = function (key) {\n  var target = this.store,\n      path = common.path(key, this.logicalSeparator); //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  while (path.length > 0) {\n    key = path.shift();\n\n    if (target && typeof target !== 'string' && Object.hasOwnProperty.call(target, key)) {\n      target = target[key];\n      continue;\n    }\n\n    return undefined;\n  }\n\n  return target;\n}; //\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\n\n\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      path = common.path(key, this.logicalSeparator);\n\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    } else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  } //\n  // Update the `mtime` (modified time) of the key\n  //\n\n\n  this.mtimes[key] = Date.now(); //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  while (path.length > 1) {\n    key = path.shift();\n\n    if (!target[key] || typeof target[key] !== 'object' || !Object.hasOwnProperty.call(target, key)) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  } // Set the specified value in the nested JSON structure\n\n\n  key = path.shift();\n\n  if (this.parseValues) {\n    value = common.parseValues.call(common, value);\n  }\n\n  target[key] = value;\n  return true;\n}; //\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\n\n\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      value = target,\n      path = common.path(key, this.logicalSeparator); //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n\n  delete this.mtimes[key]; //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n\n    target = value;\n  } // Delete the key from the nested JSON structure\n\n\n  key = path[i];\n  delete target[key];\n  return true;\n}; //\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\n\n\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  } //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n\n\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n\n  var self = this,\n      target = this.store,\n      path = common.path(key, this.logicalSeparator),\n      fullKey = key; //\n  // Update the `mtime` (modified time) of the key\n  //\n\n  this.mtimes[key] = Date.now(); //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  while (path.length > 1) {\n    key = path.shift();\n\n    if (!target[key]) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  } // Set the specified value in the nested JSON structure\n\n\n  key = path.shift(); //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n}; //\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\n\n\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n\n  this.mtimes = {};\n  this.store = {};\n  return true;\n}; //\n// ### function loadSync\n// Returns the store managed by this instance\n//\n\n\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};","map":{"version":3,"names":["common","require","Memory","exports","options","type","store","mtimes","readOnly","loadFrom","logicalSeparator","parseValues","loadFilesSync","prototype","get","key","target","path","length","shift","Object","hasOwnProperty","call","undefined","set","value","reset","Date","now","clear","i","merge","Array","isArray","self","fullKey","keys","every","nested","keyed","loadSync"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/node_modules/nconf/lib/nconf/stores/memory.js"],"sourcesContent":["/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('../common');\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\nvar Memory = exports.Memory = function (options) {\n  options       = options || {};\n  this.type     = 'memory';\n  this.store    = {};\n  this.mtimes   = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n  this.parseValues = options.parseValues || false;\n\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n};\n\n//\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\nMemory.prototype.get = function (key) {\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 0) {\n    key = path.shift();\n    if (target && typeof target !== 'string' && Object.hasOwnProperty.call(target, key)) {\n      target = target[key];\n      continue;\n    }\n    return undefined;\n  }\n\n  return target;\n};\n\n//\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  }\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key] || typeof target[key] !== 'object' || !Object.hasOwnProperty.call(target, key)) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n  if (this.parseValues) {\n    value = common.parseValues.call(common, value);\n  }\n  target[key] = value;\n  return true;\n};\n\n//\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      value  = target,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n  delete this.mtimes[key];\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n    target = value;\n  }\n\n  // Delete the key from the nested JSON structure\n  key = path[i];\n  delete target[key];\n  return true;\n};\n\n//\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n\n  var self    = this,\n      target  = this.store,\n      path    = common.path(key, this.logicalSeparator),\n      fullKey = key;\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key]) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n\n  //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n};\n\n//\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n\n  this.mtimes = {};\n  this.store  = {};\n  return true;\n};\n\n//\n// ### function loadSync\n// Returns the store managed by this instance\n//\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}