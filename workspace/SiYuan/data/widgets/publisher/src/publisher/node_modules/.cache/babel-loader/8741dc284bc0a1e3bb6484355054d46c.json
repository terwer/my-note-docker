{"ast":null,"code":"import { exportMdContent } from \"@/lib/siYuanApi\";\nimport { getApiParams, PUBLISH_TYPE_CONSTANTS } from \"@/lib/publish/publishUtil\";\nimport metaweblogApiClient from \"@/lib/metaweblog/metaweblog-api-client\";\nimport wordpressApiClient from \"@/lib/wordpress/wordpress-api-client\";\n\nasync function doPublish(id, type, meta, content) {\n  console.log(\"doPublish params=>\", {\n    id,\n    type,\n    meta,\n    content\n  });\n  const apiParams = getApiParams(type);\n  console.log(\"doPublish apiParams=>\", {\n    \"API_URL\": apiParams.API_URL,\n    \"appKey\": apiParams.appKey,\n    \"username\": apiParams.username,\n    \"apiParams.postidKey\": apiParams.postidKey\n  }); // 设置自定义属性\n\n  const postidKey = apiParams.postidKey;\n  const customAttr = {\n    \"custom-slug\": \"\",\n    \"custom-vuepress-slug\": \"\",\n    [postidKey]: \"99999\"\n  };\n  console.log(\"设置自定义属性customAttr=>\", customAttr); // Wordpress调用Wordpress的API\n\n  if (PUBLISH_TYPE_CONSTANTS.API_TYPE_WORDPRESS === type) {\n    console.log(\"Wordpress调用Wordpress的API\");\n    const wordpressApi = wordpressApiClient(type);\n    const result = wordpressApi.getPosts(10);\n    result.then(function (resolve, reject) {\n      if (reject) {\n        console.log(\"wordpress getPosts reject=>\", reject);\n      } else {\n        console.log(\"wordpress getPosts=>\", resolve);\n      }\n    });\n  } else {\n    // 其他平台调用metaweblogApi的适配器\n    console.log(\"其他平台调用metaweblogApi的适配器\");\n    const metaWeblogApi = metaweblogApiClient(type);\n    const result = metaWeblogApi.getRecentPosts(10);\n    result.then(function (posts) {\n      console.log(\"metaweblog get recent posts=>\", posts);\n    }).catch(function (e) {\n      console.error(e);\n    });\n  } // fetchPost(\"/api/attr/setBlockAttrs\", {\n  //     \"id\": id,\n  //     \"attrs\": customAttr\n  // }, (response) => {\n  //     const newmeta = response;\n  //     console.log(\"doPublish customAttr=>\", customAttr);\n  //     // console.log(\"doPublish content=>\", content);\n  // });\n\n}\n/**\n * 发布Markdown格式的文档\n * @param id 文档ID\n * @param type 文档类型\n * @param meta 文档属性\n * @returns {Promise<void>}\n */\n\n\nexport async function publishMdContent(id, type, meta) {\n  const data = await exportMdContent(id);\n  const content = data.content;\n  console.log(\"发布Markdown格式的文档\");\n  return await doPublish(id, type, meta, content);\n}\n/**\n * 发布HTML格式的文档\n * @param id 文档ID\n * @param type 文档类型\n * @param meta 文档属性\n * @returns {Promise<void>}\n */\n\nexport async function publishHTMLContent(id, type, meta) {\n  const data = await exportMdContent(id);\n  const content = data.content;\n  const html = content;\n  console.log(\"发布HTML格式的文档\");\n  return await doPublish(id, type, meta, html);\n}","map":{"version":3,"names":["exportMdContent","getApiParams","PUBLISH_TYPE_CONSTANTS","metaweblogApiClient","wordpressApiClient","doPublish","id","type","meta","content","console","log","apiParams","API_URL","appKey","username","postidKey","customAttr","API_TYPE_WORDPRESS","wordpressApi","result","getPosts","then","resolve","reject","metaWeblogApi","getRecentPosts","posts","catch","e","error","publishMdContent","data","publishHTMLContent","html"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/src/lib/publish/publish.js"],"sourcesContent":["import {exportMdContent} from \"@/lib/siYuanApi\";\nimport {getApiParams, PUBLISH_TYPE_CONSTANTS} from \"@/lib/publish/publishUtil\";\nimport metaweblogApiClient from \"@/lib/metaweblog/metaweblog-api-client\";\nimport wordpressApiClient from \"@/lib/wordpress/wordpress-api-client\";\n\nasync function doPublish(id, type, meta, content) {\n    console.log(\"doPublish params=>\", {id, type, meta, content});\n    const apiParams = getApiParams(type);\n    console.log(\"doPublish apiParams=>\", {\n        \"API_URL\": apiParams.API_URL,\n        \"appKey\": apiParams.appKey,\n        \"username\": apiParams.username,\n        \"apiParams.postidKey\": apiParams.postidKey\n    });\n\n    // 设置自定义属性\n    const postidKey = apiParams.postidKey;\n    const customAttr = {\n        \"custom-slug\": \"\",\n        \"custom-vuepress-slug\": \"\",\n        [postidKey]: \"99999\",\n    };\n\n    console.log(\"设置自定义属性customAttr=>\", customAttr);\n\n    // Wordpress调用Wordpress的API\n    if (PUBLISH_TYPE_CONSTANTS.API_TYPE_WORDPRESS === type) {\n        console.log(\"Wordpress调用Wordpress的API\");\n        const wordpressApi = wordpressApiClient(type);\n        const result = wordpressApi.getPosts(10);\n        result.then(function (resolve, reject) {\n            if (reject) {\n                console.log(\"wordpress getPosts reject=>\", reject);\n            } else {\n                console.log(\"wordpress getPosts=>\", resolve);\n            }\n        });\n    } else {\n        // 其他平台调用metaweblogApi的适配器\n        console.log(\"其他平台调用metaweblogApi的适配器\");\n        const metaWeblogApi = metaweblogApiClient(type);\n        const result = metaWeblogApi.getRecentPosts(10);\n        result.then(function (posts) {\n            console.log(\"metaweblog get recent posts=>\", posts);\n        }).catch(function (e) {\n            console.error(e);\n        });\n    }\n\n    // fetchPost(\"/api/attr/setBlockAttrs\", {\n    //     \"id\": id,\n    //     \"attrs\": customAttr\n    // }, (response) => {\n    //     const newmeta = response;\n    //     console.log(\"doPublish customAttr=>\", customAttr);\n    //     // console.log(\"doPublish content=>\", content);\n    // });\n}\n\n/**\n * 发布Markdown格式的文档\n * @param id 文档ID\n * @param type 文档类型\n * @param meta 文档属性\n * @returns {Promise<void>}\n */\nexport async function publishMdContent(id, type, meta) {\n    const data = await exportMdContent(id);\n\n    const content = data.content;\n\n    console.log(\"发布Markdown格式的文档\")\n    return await doPublish(id, type, meta, content);\n}\n\n/**\n * 发布HTML格式的文档\n * @param id 文档ID\n * @param type 文档类型\n * @param meta 文档属性\n * @returns {Promise<void>}\n */\nexport async function publishHTMLContent(id, type, meta) {\n    const data = await exportMdContent(id);\n\n    const content = data.content;\n    const html = content;\n\n    console.log(\"发布HTML格式的文档\")\n    return await doPublish(id, type, meta, html);\n}"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,iBAA9B;AACA,SAAQC,YAAR,EAAsBC,sBAAtB,QAAmD,2BAAnD;AACA,OAAOC,mBAAP,MAAgC,wCAAhC;AACA,OAAOC,kBAAP,MAA+B,sCAA/B;;AAEA,eAAeC,SAAf,CAAyBC,EAAzB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;EAC9CC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC;IAACL,EAAD;IAAKC,IAAL;IAAWC,IAAX;IAAiBC;EAAjB,CAAlC;EACA,MAAMG,SAAS,GAAGX,YAAY,CAACM,IAAD,CAA9B;EACAG,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC;IACjC,WAAWC,SAAS,CAACC,OADY;IAEjC,UAAUD,SAAS,CAACE,MAFa;IAGjC,YAAYF,SAAS,CAACG,QAHW;IAIjC,uBAAuBH,SAAS,CAACI;EAJA,CAArC,EAH8C,CAU9C;;EACA,MAAMA,SAAS,GAAGJ,SAAS,CAACI,SAA5B;EACA,MAAMC,UAAU,GAAG;IACf,eAAe,EADA;IAEf,wBAAwB,EAFT;IAGf,CAACD,SAAD,GAAa;EAHE,CAAnB;EAMAN,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCM,UAAnC,EAlB8C,CAoB9C;;EACA,IAAIf,sBAAsB,CAACgB,kBAAvB,KAA8CX,IAAlD,EAAwD;IACpDG,OAAO,CAACC,GAAR,CAAY,0BAAZ;IACA,MAAMQ,YAAY,GAAGf,kBAAkB,CAACG,IAAD,CAAvC;IACA,MAAMa,MAAM,GAAGD,YAAY,CAACE,QAAb,CAAsB,EAAtB,CAAf;IACAD,MAAM,CAACE,IAAP,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MACnC,IAAIA,MAAJ,EAAY;QACRd,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2Ca,MAA3C;MACH,CAFD,MAEO;QACHd,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCY,OAApC;MACH;IACJ,CAND;EAOH,CAXD,MAWO;IACH;IACAb,OAAO,CAACC,GAAR,CAAY,yBAAZ;IACA,MAAMc,aAAa,GAAGtB,mBAAmB,CAACI,IAAD,CAAzC;IACA,MAAMa,MAAM,GAAGK,aAAa,CAACC,cAAd,CAA6B,EAA7B,CAAf;IACAN,MAAM,CAACE,IAAP,CAAY,UAAUK,KAAV,EAAiB;MACzBjB,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CgB,KAA7C;IACH,CAFD,EAEGC,KAFH,CAES,UAAUC,CAAV,EAAa;MAClBnB,OAAO,CAACoB,KAAR,CAAcD,CAAd;IACH,CAJD;EAKH,CA1C6C,CA4C9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,eAAeE,gBAAf,CAAgCzB,EAAhC,EAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;EACnD,MAAMwB,IAAI,GAAG,MAAMhC,eAAe,CAACM,EAAD,CAAlC;EAEA,MAAMG,OAAO,GAAGuB,IAAI,CAACvB,OAArB;EAEAC,OAAO,CAACC,GAAR,CAAY,iBAAZ;EACA,OAAO,MAAMN,SAAS,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAiBC,OAAjB,CAAtB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAewB,kBAAf,CAAkC3B,EAAlC,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkD;EACrD,MAAMwB,IAAI,GAAG,MAAMhC,eAAe,CAACM,EAAD,CAAlC;EAEA,MAAMG,OAAO,GAAGuB,IAAI,CAACvB,OAArB;EACA,MAAMyB,IAAI,GAAGzB,OAAb;EAEAC,OAAO,CAACC,GAAR,CAAY,aAAZ;EACA,OAAO,MAAMN,SAAS,CAACC,EAAD,EAAKC,IAAL,EAAWC,IAAX,EAAiB0B,IAAjB,CAAtB;AACH"},"metadata":{},"sourceType":"module"}