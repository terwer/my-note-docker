{"ast":null,"code":"var maps = {};\n\nfunction extend(a, b) {\n  for (var p in b) {\n    a[p] = b[p];\n  }\n\n  return a;\n}\n\nfunction createFieldMaps(renames, toFns, fromFns) {\n  var to = extend({}, renames),\n      from = {};\n  Object.keys(renames).forEach(function (key) {\n    from[renames[key]] = key;\n  });\n  return {\n    renames: renames,\n    to: extend(to, toFns),\n    from: extend(from, fromFns)\n  };\n}\n\nfunction mapFields(data, map) {\n  var field,\n      value,\n      mappedField,\n      ret = {};\n\n  for (field in data) {\n    value = data[field];\n    mappedField = map[field]; // no map -> delete\n\n    if (!mappedField) {\n      continue; // string -> change field name\n    } else if (typeof mappedField === \"string\") {\n      ret[mappedField] = value; // function -> merge result\n    } else {\n      extend(ret, mappedField(value));\n    }\n  }\n\n  return ret;\n}\n\nmaps.labels = createFieldMaps({\n  addNewItem: \"add_new_item\",\n  addOrRemoveItems: \"add_or_remove_items\",\n  allItems: \"all_items\",\n  chooseFromMostUsed: \"choose_from_most_used\",\n  editItem: \"edit_item\",\n  menuName: \"menu_name\",\n  name: \"name\",\n  nameAdminBar: \"name_admin_bar\",\n  newItemName: \"new_item_name\",\n  parentItem: \"parent_item\",\n  parentItemColon: \"parent_item_colon\",\n  popularItems: \"popular_items\",\n  searchItems: \"search_items\",\n  separateItemsWithCommas: \"separate_items_with_commas\",\n  singularName: \"singular_name\",\n  updateItem: \"update_item\",\n  viewItem: \"view_item\"\n});\nmaps.post = createFieldMaps({\n  author:\n  /* int */\n  \"post_author\",\n  commentStatus:\n  /* string */\n  \"comment_status\",\n  content:\n  /* string */\n  \"post_content\",\n  customFields:\n  /* array */\n  \"custom_fields\",\n  date:\n  /* datetime */\n  \"post_date\",\n  excerpt:\n  /* string */\n  \"post_excerpt\",\n  format:\n  /* string */\n  \"post_format\",\n  id:\n  /* string */\n  \"post_id\",\n\n  /* readonly */\n  link:\n  /* string */\n  \"link\"\n  /* readonly */\n  ,\n  modified:\n  /* datetime */\n  \"post_modified\",\n  menuOrder:\n  /* int */\n  \"menu_order\",\n  name:\n  /* string */\n  \"post_name\",\n  pageTemplate:\n  /* string */\n  \"page_template\",\n  parent:\n  /* int */\n  \"post_parent\",\n  password:\n  /* string */\n  \"post_password\",\n  pingStatus:\n  /* string */\n  \"ping_status\",\n  status:\n  /* string */\n  \"post_status\",\n  sticky:\n  /* bool */\n  \"sticky\",\n  terms:\n  /* struct */\n  \"terms\"\n  /* array */\n  ,\n  termNames:\n  /* struct */\n  \"terms_names\",\n  thumbnail:\n  /* int */\n  \"post_thumbnail\",\n  title:\n  /* string */\n  \"post_title\",\n  type:\n  /* string */\n  \"post_type\"\n}, {}, {\n  post_date_gmt:\n  /* datetime */\n  function (date) {\n    return {\n      date: new Date(date)\n    };\n  },\n  post_modified_gmt:\n  /* datetime */\n  function (date) {\n    return {\n      modified: new Date(date)\n    };\n  }\n});\nmaps.postType = createFieldMaps({\n  _builtin:\n  /* bool */\n  \"_builtin\",\n  cap:\n  /* struct */\n  \"cap\",\n  capabilityType:\n  /* string */\n  \"capability_type\",\n  description:\n  /* string */\n  \"description\",\n  _editLink:\n  /* string */\n  \"_edit_link\",\n  excludeFromSearch:\n  /* bool */\n  \"exclude_from_search\",\n  hasArchive:\n  /* bool */\n  \"has_archive\",\n  hierarchical:\n  /* bool */\n  \"hierarchical\",\n  label:\n  /* string */\n  \"label\",\n  labels:\n  /* struct */\n  \"labels\",\n  mapMetaCap:\n  /* bool */\n  \"map_meta_cap\",\n  menuIcon:\n  /* string */\n  \"menu_icon\",\n  menuPosition:\n  /* int */\n  \"menu_position\",\n  name:\n  /* string */\n  \"name\",\n  \"public\":\n  /* bool */\n  \"public\",\n  publiclyQuerably:\n  /* bool */\n  \"publicly_queryable\",\n  queryVar:\n  /* mixed */\n  \"query_var\",\n  rewrite:\n  /* mixed */\n  \"rewrite\",\n  showInAdminBar:\n  /* bool */\n  \"show_in_admin_bar\",\n  showInMenu:\n  /* bool */\n  \"show_in_menu\",\n  showInNavMenus:\n  /* bool */\n  \"show_in_nav_menus\",\n  showUi:\n  /* bool */\n  \"show_ui\",\n  supports:\n  /* array */\n  \"supports\",\n  taxonomies:\n  /* array */\n  \"taxonomies\"\n}, {}, {\n  cap: function (cap) {\n    return {\n      cap: mapFields(cap, maps.postTypeCap.from)\n    };\n  },\n  labels: function (labels) {\n    return {\n      labels: mapFields(labels, maps.labels.from)\n    };\n  }\n});\nmaps.postTypeCap = createFieldMaps({\n  deleteOthersPosts:\n  /* string */\n  \"delete_others_posts\",\n  deletePost:\n  /* string */\n  \"delete_post\",\n  deletePosts:\n  /* string */\n  \"delete_posts\",\n  deletePrivatePosts:\n  /* string */\n  \"delete_private_posts\",\n  deletePublishedPosts:\n  /* string */\n  \"delete_published_posts\",\n  editOthersPosts:\n  /* string */\n  \"edit_others_posts\",\n  editPost:\n  /* string */\n  \"edit_post\",\n  editPosts:\n  /* string */\n  \"edit_posts\",\n  editPrivatePosts:\n  /* string */\n  \"edit_private_posts\",\n  editPublishedPosts:\n  /* string */\n  \"edit_published_posts\",\n  publishPosts:\n  /* string */\n  \"publish_posts\",\n  read:\n  /* string */\n  \"read\",\n  readPost:\n  /* sring */\n  \"read_post\",\n  readPrivatePosts:\n  /* string */\n  \"read_private_posts\"\n});\nmaps.taxonomy = createFieldMaps({\n  cap:\n  /* struct */\n  \"cap\",\n  hierarchical:\n  /* bool */\n  \"hierarchical\",\n  name:\n  /* string */\n  \"name\",\n  label:\n  /* string */\n  \"label\",\n  labels:\n  /* struct */\n  \"labels\",\n  objectType:\n  /* array */\n  \"object_type\",\n  \"public\":\n  /* bool */\n  \"public\",\n  queryVar:\n  /* string */\n  \"query_var\",\n  rewrite:\n  /* struct */\n  \"rewrite\",\n  showInNavMenus:\n  /* bool */\n  \"show_in_nav_menus\",\n  showTagCloud:\n  /* bool */\n  \"show_tagcloud\",\n  showUi:\n  /* bool */\n  \"show_ui\"\n}, {}, {\n  cap: function (cap) {\n    return {\n      cap: mapFields(cap, maps.taxonomyCap.from)\n    };\n  },\n  labels: function (labels) {\n    return {\n      labels: mapFields(labels, maps.labels.from)\n    };\n  }\n});\nmaps.taxonomyCap = createFieldMaps({\n  assignTerms:\n  /* string */\n  \"assign_terms\",\n  deleteTerms:\n  /* string */\n  \"delete_terms\",\n  editTerms:\n  /* string */\n  \"edit_terms\",\n  manageTerms:\n  /* string */\n  \"manage_terms\"\n});\nmaps.term = createFieldMaps({\n  count:\n  /* int */\n  \"count\",\n\n  /* readonly */\n  description:\n  /* string */\n  \"description\",\n  name:\n  /* string */\n  \"name\",\n  parent:\n  /* string */\n  \"parent\",\n  slug:\n  /* string */\n  \"slug\",\n  taxonomy:\n  /* string */\n  \"taxonomy\",\n  termId:\n  /* string */\n  \"term_id\",\n\n  /* readonly */\n  termTaxonomyId:\n  /* string */\n  \"term_taxonomy_id\"\n  /* readonly */\n\n});\nmaps.file = createFieldMaps({\n  name:\n  /* string */\n  \"name\",\n  type:\n  /* string */\n  \"type\",\n  bits:\n  /* string */\n  \"bits\",\n  overwrite:\n  /* boolean */\n  \"overwrite\",\n  postId:\n  /* int */\n  \"post_id\"\n});\nmaps.media = createFieldMaps({\n  attachmentId:\n  /* string */\n  \"attachment_id\",\n\n  /* readonly */\n  caption:\n  /* string */\n  \"caption\",\n  description:\n  /* string */\n  \"description\",\n  link:\n  /* string */\n  \"link\",\n  parent:\n  /* int */\n  \"parent\",\n  thumbnail:\n  /* string */\n  \"thumbnail\",\n  title:\n  /* string */\n  \"title\",\n  type:\n  /* string */\n  \"type\"\n}, {}, {\n  date_created_gmt:\n  /* datetime */\n  function (date) {\n    return {\n      date: new Date(date)\n    };\n  },\n  metadata:\n  /* struct */\n  function (data) {\n    return {\n      metadata: mapFields(data, maps.mediaItemMetadata.from)\n    };\n  }\n});\nmaps.mediaItemMetadata = createFieldMaps({\n  file:\n  /* string */\n  \"file\",\n  height:\n  /* int */\n  \"height\",\n  sizes:\n  /* struct */\n  \"sizes\",\n  width:\n  /* int */\n  \"width\"\n}, {}, {\n  sizes:\n  /* struct */\n  function (size) {\n    var keys = Object.keys(size),\n        results = {}; // Loop through the available sizes and map the fields\n\n    keys.forEach(function (key, i) {\n      results[keys[i]] = mapFields(size[keys[i]], maps.mediaItemSize.from);\n    });\n    return {\n      sizes: results\n    };\n  },\n  image_meta:\n  /* struct */\n  function (data) {\n    return {\n      imageMeta: mapFields(data, maps.postThumbnailImageMeta.from)\n    };\n  }\n});\nmaps.mediaItemSize = createFieldMaps({\n  file:\n  /* string */\n  \"file\",\n  height:\n  /* string */\n  \"height\",\n  mimeType:\n  /* string */\n  \"mime-type\",\n  width:\n  /* string */\n  \"width\"\n});\nmaps.postThumbnailImageMeta = createFieldMaps({\n  aperture:\n  /* int */\n  \"aperture\",\n  camera:\n  /* string */\n  \"camera\",\n  caption:\n  /* string */\n  \"caption\",\n  copyright:\n  /* string */\n  \"copyright\",\n  createdTimestamp:\n  /* int */\n  \"created_timestamp\",\n  credit:\n  /* string */\n  \"credit\",\n  focalLength:\n  /* int */\n  \"focal_length\",\n  iso:\n  /* int */\n  \"iso\",\n  keywords:\n  /* array */\n  \"keywords\",\n  orientation:\n  /* string */\n  \"orientation\",\n  shutterSpeed:\n  /* int */\n  \"shutter_speed\",\n  title:\n  /* string */\n  \"title\"\n});\nmodule.exports = {\n  to: function (data, type) {\n    return mapFields(data, maps[type].to);\n  },\n  from: function (data, type) {\n    return mapFields(data, maps[type].from);\n  },\n  array: function (data, type) {\n    var map = maps[type].renames;\n    return data.map(function (field) {\n      return map[field];\n    });\n  }\n};","map":{"version":3,"names":["maps","extend","a","b","p","createFieldMaps","renames","toFns","fromFns","to","from","Object","keys","forEach","key","mapFields","data","map","field","value","mappedField","ret","labels","addNewItem","addOrRemoveItems","allItems","chooseFromMostUsed","editItem","menuName","name","nameAdminBar","newItemName","parentItem","parentItemColon","popularItems","searchItems","separateItemsWithCommas","singularName","updateItem","viewItem","post","author","commentStatus","content","customFields","date","excerpt","format","id","link","modified","menuOrder","pageTemplate","parent","password","pingStatus","status","sticky","terms","termNames","thumbnail","title","type","post_date_gmt","Date","post_modified_gmt","postType","_builtin","cap","capabilityType","description","_editLink","excludeFromSearch","hasArchive","hierarchical","label","mapMetaCap","menuIcon","menuPosition","publiclyQuerably","queryVar","rewrite","showInAdminBar","showInMenu","showInNavMenus","showUi","supports","taxonomies","postTypeCap","deleteOthersPosts","deletePost","deletePosts","deletePrivatePosts","deletePublishedPosts","editOthersPosts","editPost","editPosts","editPrivatePosts","editPublishedPosts","publishPosts","read","readPost","readPrivatePosts","taxonomy","objectType","showTagCloud","taxonomyCap","assignTerms","deleteTerms","editTerms","manageTerms","term","count","slug","termId","termTaxonomyId","file","bits","overwrite","postId","media","attachmentId","caption","date_created_gmt","metadata","mediaItemMetadata","height","sizes","width","size","results","i","mediaItemSize","image_meta","imageMeta","postThumbnailImageMeta","mimeType","aperture","camera","copyright","createdTimestamp","credit","focalLength","iso","keywords","orientation","shutterSpeed","module","exports","array"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/node_modules/wordpress/lib/fields.js"],"sourcesContent":["var maps = {};\n\nfunction extend( a, b ) {\n\tfor ( var p in b ) {\n\t\ta[ p ] = b[ p ];\n\t}\n\n\treturn a;\n}\n\nfunction createFieldMaps( renames, toFns, fromFns ) {\n\tvar to = extend( {}, renames ),\n\t\tfrom = {};\n\n\tObject.keys( renames ).forEach(function( key ) {\n\t\tfrom[ renames[ key ] ] = key;\n\t});\n\n\treturn {\n\t\trenames: renames,\n\t\tto: extend( to, toFns ),\n\t\tfrom: extend( from, fromFns )\n\t};\n}\n\nfunction mapFields( data, map ) {\n\tvar field, value, mappedField,\n\t\tret = {};\n\n\tfor ( field in data ) {\n\t\tvalue = data[ field ];\n\t\tmappedField = map[ field ];\n\n\t\t// no map -> delete\n\t\tif ( !mappedField ) {\n\t\t\tcontinue;\n\t\t// string -> change field name\n\t\t} else if ( typeof mappedField === \"string\" ) {\n\t\t\tret[ mappedField ] = value;\n\t\t// function -> merge result\n\t\t} else {\n\t\t\textend( ret, mappedField( value ) );\n\t\t}\n\t}\n\n\treturn ret;\n}\n\nmaps.labels = createFieldMaps({\n\taddNewItem: \"add_new_item\",\n\taddOrRemoveItems: \"add_or_remove_items\",\n\tallItems: \"all_items\",\n\tchooseFromMostUsed: \"choose_from_most_used\",\n\teditItem: \"edit_item\",\n\tmenuName: \"menu_name\",\n\tname: \"name\",\n\tnameAdminBar: \"name_admin_bar\",\n\tnewItemName: \"new_item_name\",\n\tparentItem: \"parent_item\",\n\tparentItemColon: \"parent_item_colon\",\n\tpopularItems: \"popular_items\",\n\tsearchItems: \"search_items\",\n\tseparateItemsWithCommas: \"separate_items_with_commas\",\n\tsingularName: \"singular_name\",\n\tupdateItem: \"update_item\",\n\tviewItem: \"view_item\"\n});\n\nmaps.post = createFieldMaps({\n\tauthor: /* int */ \"post_author\",\n\tcommentStatus: /* string */ \"comment_status\",\n\tcontent: /* string */ \"post_content\",\n\tcustomFields: /* array */ \"custom_fields\",\n\tdate: /* datetime */ \"post_date\",\n\texcerpt: /* string */ \"post_excerpt\",\n\tformat: /* string */\"post_format\",\n\tid: /* string */ \"post_id\", /* readonly */\n\tlink: /* string */ \"link\" /* readonly */,\n\tmodified: /* datetime */ \"post_modified\",\n\tmenuOrder: /* int */ \"menu_order\",\n\tname: /* string */ \"post_name\",\n\tpageTemplate: /* string */ \"page_template\",\n\tparent: /* int */ \"post_parent\",\n\tpassword: /* string */ \"post_password\",\n\tpingStatus: /* string */ \"ping_status\",\n\tstatus: /* string */ \"post_status\",\n\tsticky: /* bool */ \"sticky\",\n\tterms: /* struct */ \"terms\" /* array */,\n\ttermNames: /* struct */ \"terms_names\",\n\tthumbnail: /* int */ \"post_thumbnail\",\n\ttitle: /* string */ \"post_title\",\n\ttype: /* string */ \"post_type\"\n}, {}, {\n\tpost_date_gmt: /* datetime */ function( date ) {\n\t\treturn {\n\t\t\tdate: new Date( date )\n\t\t};\n\t},\n\tpost_modified_gmt: /* datetime */ function( date ) {\n\t\treturn {\n\t\t\tmodified: new Date( date )\n\t\t};\n\t}\n});\n\nmaps.postType = createFieldMaps({\n\t_builtin: /* bool */ \"_builtin\",\n\tcap: /* struct */ \"cap\",\n\tcapabilityType: /* string */ \"capability_type\",\n\tdescription: /* string */ \"description\",\n\t_editLink: /* string */ \"_edit_link\",\n\texcludeFromSearch: /* bool */ \"exclude_from_search\",\n\thasArchive: /* bool */ \"has_archive\",\n\thierarchical: /* bool */ \"hierarchical\",\n\tlabel: /* string */ \"label\",\n\tlabels: /* struct */ \"labels\",\n\tmapMetaCap: /* bool */ \"map_meta_cap\",\n\tmenuIcon: /* string */ \"menu_icon\",\n\tmenuPosition: /* int */ \"menu_position\",\n\tname: /* string */ \"name\",\n\t\"public\": /* bool */ \"public\",\n\tpubliclyQuerably: /* bool */ \"publicly_queryable\",\n\tqueryVar: /* mixed */ \"query_var\",\n\trewrite: /* mixed */ \"rewrite\",\n\tshowInAdminBar: /* bool */ \"show_in_admin_bar\",\n\tshowInMenu: /* bool */ \"show_in_menu\",\n\tshowInNavMenus: /* bool */ \"show_in_nav_menus\",\n\tshowUi: /* bool */ \"show_ui\",\n\tsupports: /* array */ \"supports\",\n\ttaxonomies: /* array */ \"taxonomies\"\n}, {}, {\n\tcap: function( cap ) {\n\t\treturn { cap: mapFields( cap, maps.postTypeCap.from ) };\n\t},\n\tlabels: function( labels ) {\n\t\treturn { labels: mapFields( labels, maps.labels.from ) };\n\t}\n});\n\nmaps.postTypeCap = createFieldMaps({\n\tdeleteOthersPosts: /* string */ \"delete_others_posts\",\n\tdeletePost: /* string */ \"delete_post\",\n\tdeletePosts: /* string */ \"delete_posts\",\n\tdeletePrivatePosts: /* string */ \"delete_private_posts\",\n\tdeletePublishedPosts: /* string */ \"delete_published_posts\",\n\teditOthersPosts: /* string */ \"edit_others_posts\",\n\teditPost: /* string */ \"edit_post\",\n\teditPosts: /* string */ \"edit_posts\",\n\teditPrivatePosts: /* string */ \"edit_private_posts\",\n\teditPublishedPosts: /* string */ \"edit_published_posts\",\n\tpublishPosts: /* string */ \"publish_posts\",\n\tread: /* string */ \"read\",\n\treadPost: /* sring */ \"read_post\",\n\treadPrivatePosts: /* string */ \"read_private_posts\"\n});\n\nmaps.taxonomy = createFieldMaps({\n\tcap: /* struct */ \"cap\",\n\thierarchical: /* bool */ \"hierarchical\",\n\tname: /* string */ \"name\",\n\tlabel: /* string */ \"label\",\n\tlabels: /* struct */ \"labels\",\n\tobjectType: /* array */ \"object_type\",\n\t\"public\": /* bool */ \"public\",\n\tqueryVar: /* string */ \"query_var\",\n\trewrite: /* struct */ \"rewrite\",\n\tshowInNavMenus: /* bool */ \"show_in_nav_menus\",\n\tshowTagCloud: /* bool */ \"show_tagcloud\",\n\tshowUi: /* bool */ \"show_ui\"\n}, {}, {\n\tcap: function( cap ) {\n\t\treturn { cap: mapFields( cap, maps.taxonomyCap.from ) };\n\t},\n\tlabels: function( labels ) {\n\t\treturn { labels: mapFields( labels, maps.labels.from ) };\n\t}\n});\n\nmaps.taxonomyCap = createFieldMaps({\n\tassignTerms: /* string */ \"assign_terms\",\n\tdeleteTerms: /* string */ \"delete_terms\",\n\teditTerms: /* string */ \"edit_terms\",\n\tmanageTerms: /* string */ \"manage_terms\"\n});\n\nmaps.term = createFieldMaps({\n\tcount: /* int */ \"count\", /* readonly */\n\tdescription: /* string */ \"description\",\n\tname: /* string */ \"name\",\n\tparent: /* string */ \"parent\",\n\tslug: /* string */ \"slug\",\n\ttaxonomy: /* string */ \"taxonomy\",\n\ttermId: /* string */ \"term_id\", /* readonly */\n\ttermTaxonomyId: /* string */ \"term_taxonomy_id\" /* readonly */\n});\n\nmaps.file = createFieldMaps({\n\tname: /* string */ \"name\",\n\ttype: /* string */ \"type\",\n\tbits: /* string */ \"bits\",\n\toverwrite: /* boolean */ \"overwrite\",\n\tpostId: /* int */ \"post_id\"\n});\n\nmaps.media = createFieldMaps({\n\tattachmentId: /* string */ \"attachment_id\", /* readonly */\n\tcaption: /* string */ \"caption\",\n\tdescription: /* string */ \"description\",\n\tlink: /* string */ \"link\",\n\tparent: /* int */ \"parent\",\n\tthumbnail: /* string */ \"thumbnail\",\n\ttitle: /* string */ \"title\",\n\ttype: /* string */ \"type\"\n}, {}, {\n\tdate_created_gmt: /* datetime */ function( date ) {\n\t\treturn {\n\t\t\tdate: new Date( date )\n\t\t};\n\t},\n\n\tmetadata: /* struct */ function( data ) {\n\t\treturn {\n\t\t\tmetadata: mapFields( data, maps.mediaItemMetadata.from )\n\t\t};\n\t}\n});\n\nmaps.mediaItemMetadata = createFieldMaps({\n\tfile: /* string */ \"file\",\n\theight: /* int */ \"height\",\n\tsizes: /* struct */ \"sizes\",\n\twidth: /* int */ \"width\"\n}, {}, {\n\tsizes: /* struct */ function( size ) {\n\t\tvar keys = Object.keys( size ),\n\t\t    results = {};\n\n\t\t// Loop through the available sizes and map the fields\n\t\tkeys.forEach(function( key, i ) {\n\t\t\tresults[ keys[ i ] ] = mapFields( size[ keys[ i ] ], maps.mediaItemSize.from );\n\t\t});\n\n\t\treturn {\n\t\t\tsizes: results\n\t\t};\n\t},\n\n\timage_meta: /* struct */ function( data ) {\n\t\treturn {\n\t\t\timageMeta: mapFields( data, maps.postThumbnailImageMeta.from )\n\t\t};\n\t}\n});\n\nmaps.mediaItemSize = createFieldMaps({\n\tfile: /* string */ \"file\",\n\theight: /* string */ \"height\",\n\tmimeType: /* string */ \"mime-type\",\n\twidth: /* string */ \"width\"\n});\n\nmaps.postThumbnailImageMeta = createFieldMaps({\n\taperture: /* int */ \"aperture\",\n\tcamera: /* string */ \"camera\",\n\tcaption: /* string */ \"caption\",\n\tcopyright: /* string */ \"copyright\",\n\tcreatedTimestamp: /* int */ \"created_timestamp\",\n\tcredit: /* string */ \"credit\",\n\tfocalLength: /* int */ \"focal_length\",\n\tiso: /* int */ \"iso\",\n\tkeywords: /* array */ \"keywords\",\n\torientation: /* string */ \"orientation\",\n\tshutterSpeed: /* int */ \"shutter_speed\",\n\ttitle: /* string */ \"title\"\n});\n\nmodule.exports = {\n\tto: function( data, type ) {\n\t\treturn mapFields( data, maps[ type ].to );\n\t},\n\tfrom: function( data, type ) {\n\t\treturn mapFields( data, maps[ type ].from );\n\t},\n\tarray: function( data, type ) {\n\t\tvar map = maps[ type ].renames;\n\t\treturn data.map(function( field ) {\n\t\t\treturn map[ field ];\n\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}