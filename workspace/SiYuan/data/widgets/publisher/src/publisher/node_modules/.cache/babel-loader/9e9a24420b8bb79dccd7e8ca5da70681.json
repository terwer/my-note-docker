{"ast":null,"code":"/**\r\n * @file MetaWeblog API Documentation\r\n * A Node.js implementaton of MetaWeblog API.\r\n * @author Peng Chen <peng-chen@live.com>\r\n */\n'use strict';\n\nconst xmlrpc = require('xmlrpc');\n\nconst url = require('url');\n/**\r\n * @constructs MetaWeblog\r\n * @param {String} uri - Server URI to make the HTTP request to.\r\n */\n\n\nfunction MetaWeblog(uri) {\n  var urlparts = url.parse(uri);\n  var secure = urlparts.protocol == 'https:';\n  var client;\n\n  if (secure) {\n    client = xmlrpc.createSecureClient(uri);\n  } else {\n    client = xmlrpc.createClient(uri);\n  }\n  /*\r\n   * Makes an XML-RPC call to the server and returns a Promise.\r\n   * @param {String} methodName - The method name.\r\n   * @param {Array} params      - Params to send in the call.\r\n   * @return {Promise<Object|Error>} \r\n   */\n\n\n  function methodCall(methodName, params) {\n    return new Promise(function (resolve, reject) {\n      client.methodCall(methodName, params, function (error, data) {\n        if (!error) {\n          resolve(data);\n        } else {\n          reject(error);\n        }\n      });\n    });\n  }\n  /**\r\n   * Returns information on all the blogs of a given user.\r\n   * @param {String} appKey\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @return {Promise<BlogInfo[]|Error>}\r\n   */\n\n\n  this.getUsersBlogs = function (appKey, username, password) {\n    return methodCall('blogger.getUsersBlogs', [appKey, username, password]);\n  };\n  /**\r\n   * Retrieves a list of the most recent posts.\r\n   * @param {String} blogid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @param {Number} numberOfPosts\r\n   * @return {Promise<Post[]|Error>}\r\n   */\n\n\n  this.getRecentPosts = function (blogid, username, password, numberOfPosts) {\n    return methodCall('metaWeblog.getRecentPosts', [blogid, username, password, numberOfPosts]);\n  };\n  /**\r\n   * Retrieves a list of valid categories.\r\n   * @param {String} blogid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @return {Promise<CategoryInfo[]|Error>}\r\n   */\n\n\n  this.getCategories = function (blogid, username, password) {\n    return methodCall('metaWeblog.getCategories', [blogid, username, password]);\n  };\n  /**\r\n   * Gets a post by id.\r\n   * @param {String} postid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @return {Promise<Post|Error>}\r\n   */\n\n\n  this.getPost = function (postid, username, password) {\n    return methodCall('metaWeblog.getPost', [postid, username, password]);\n  };\n  /**\r\n   * Updates a post by id.\r\n   * @param {String} postid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @param {Post} post\r\n   * @param {Boolean} publish\r\n   * @return {Promise<Boolean|Error>} success or error\r\n   */\n\n\n  this.editPost = function (postid, username, password, post, publish) {\n    return methodCall('metaWeblog.editPost', [postid, username, password, post, publish]);\n  };\n  /**\r\n   * Makes a new post.\r\n   * @param {String} blogid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @param {Post} post\r\n   * @param {Boolean} publish\r\n   * @return {Promise<Number|Error>} post id or error\r\n   */\n\n\n  this.newPost = function (blogid, username, password, post, publish) {\n    return methodCall('metaWeblog.newPost', [blogid, username, password, post, publish]);\n  };\n  /**\r\n   * Deletes a post.\r\n   * @param {String} appKey\r\n   * @param {String} postid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @param {Boolean} publish\r\n   * @return {Promise<Boolean|Error>} success or error\r\n   */\n\n\n  this.deletePost = function (appKey, postid, username, password, publish) {\n    return methodCall('blogger.deletePost', [appKey, postid, username, password, publish]);\n  };\n  /**\r\n   * Uploads a new file.\r\n   * @param {String} blogid\r\n   * @param {String} username\r\n   * @param {String} password\r\n   * @param {MediaObject} mediaObject\r\n   * @return {Promise<MediaObject|Error>}\r\n   */\n\n\n  this.newMediaObject = function (blogid, username, password, mediaObject) {\n    return methodCall('metaWeblog.newMediaObject', [blogid, username, password, mediaObject]);\n  };\n}\n\n;\nexports = module.exports = MetaWeblog;\n/**\r\n * Struct BlogInfo\r\n * @typedef {Object} BlogInfo\r\n * @property {String} blogid\r\n * @property {String} url\r\n * @property {String} blogName\r\n */\n\n/**\r\n * Struct Post\r\n * @typedef {Object} Post\r\n * @property {Date} dateCreated - Required when posting.\r\n * @property {String} description - Required when posting.\r\n * @property {String} title - Required when posting.\r\n * @property {String[]} [categories]\r\n * @property {String} [link]\r\n * @property {String} [permalink]\r\n * @property {String} [postid]\r\n * @property {Source} [source]\r\n * @property {String} [userid]\r\n * @property {any} [...] - other properties not listed in this doc.\r\n */\n\n/**\r\n * Struct CategoryInfo\r\n * @typedef {Object} CategoryInfo\r\n * @property {String} description\r\n * @property {String} htmlUrl\r\n * @property {String} rssUrl\r\n * @property {String} title\r\n * @property {String} categoryid\r\n */\n\n/**\r\n * Struct MediaObject\r\n * @typedef {Object} MediaObject\r\n * @property {String} name\r\n * @property {String} type\r\n * @property {base64} bits\r\n */\n\n/**\r\n * Struct Source\r\n * @typedef {Object} Source\r\n * @property {String} [name]\r\n * @property {String} [url]\r\n */\n\n/**\r\n * Struct UrlData\r\n * @typedef {Object} UrlData\r\n * @property {String} url\r\n */\n\n/**\r\n * Struct Error\r\n * @typedef {Object} Error\r\n * @property {String} faultCode\r\n * @property {String} faultString\r\n */","map":{"version":3,"names":["xmlrpc","require","url","MetaWeblog","uri","urlparts","parse","secure","protocol","client","createSecureClient","createClient","methodCall","methodName","params","Promise","resolve","reject","error","data","getUsersBlogs","appKey","username","password","getRecentPosts","blogid","numberOfPosts","getCategories","getPost","postid","editPost","post","publish","newPost","deletePost","newMediaObject","mediaObject","exports","module"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/node_modules/metaweblog-api/lib/metaweblog-api.js"],"sourcesContent":["/**\r\n * @file MetaWeblog API Documentation\r\n * A Node.js implementaton of MetaWeblog API.\r\n * @author Peng Chen <peng-chen@live.com>\r\n */\r\n\r\n'use strict';\r\n\r\nconst xmlrpc = require('xmlrpc');\r\nconst url = require('url');\r\n\r\n/**\r\n * @constructs MetaWeblog\r\n * @param {String} uri - Server URI to make the HTTP request to.\r\n */\r\nfunction MetaWeblog(uri) {\r\n    var urlparts = url.parse(uri);\r\n    var secure = urlparts.protocol == 'https:';\r\n    var client;\r\n    if (secure) {\r\n        client = xmlrpc.createSecureClient(uri);\r\n    }\r\n    else {\r\n        client = xmlrpc.createClient(uri);\r\n    }\r\n\r\n    /*\r\n     * Makes an XML-RPC call to the server and returns a Promise.\r\n     * @param {String} methodName - The method name.\r\n     * @param {Array} params      - Params to send in the call.\r\n     * @return {Promise<Object|Error>} \r\n     */\r\n    function methodCall(methodName, params) {\r\n        return new Promise(function (resolve, reject) {\r\n            client.methodCall(methodName, params, function (error, data) {\r\n                if (!error) {\r\n                    resolve(data);\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns information on all the blogs of a given user.\r\n     * @param {String} appKey\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @return {Promise<BlogInfo[]|Error>}\r\n     */\r\n    this.getUsersBlogs = function (appKey, username, password) {\r\n        return methodCall('blogger.getUsersBlogs', [appKey, username, password]);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a list of the most recent posts.\r\n     * @param {String} blogid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @param {Number} numberOfPosts\r\n     * @return {Promise<Post[]|Error>}\r\n     */\r\n    this.getRecentPosts = function (blogid, username, password, numberOfPosts) {\r\n        return methodCall('metaWeblog.getRecentPosts', [blogid, username, password, numberOfPosts]);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a list of valid categories.\r\n     * @param {String} blogid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @return {Promise<CategoryInfo[]|Error>}\r\n     */\r\n    this.getCategories = function (blogid, username, password) {\r\n        return methodCall('metaWeblog.getCategories', [blogid, username, password]);\r\n    };\r\n\r\n    /**\r\n     * Gets a post by id.\r\n     * @param {String} postid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @return {Promise<Post|Error>}\r\n     */\r\n    this.getPost = function (postid, username, password) {\r\n        return methodCall('metaWeblog.getPost', [postid, username, password]);\r\n    };\r\n\r\n    /**\r\n     * Updates a post by id.\r\n     * @param {String} postid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @param {Post} post\r\n     * @param {Boolean} publish\r\n     * @return {Promise<Boolean|Error>} success or error\r\n     */\r\n    this.editPost = function (postid, username, password, post, publish) {\r\n        return methodCall('metaWeblog.editPost', [postid, username, password, post, publish]);\r\n    };\r\n\r\n    /**\r\n     * Makes a new post.\r\n     * @param {String} blogid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @param {Post} post\r\n     * @param {Boolean} publish\r\n     * @return {Promise<Number|Error>} post id or error\r\n     */\r\n    this.newPost = function (blogid, username, password, post, publish) {\r\n        return methodCall('metaWeblog.newPost', [blogid, username, password, post, publish]);\r\n    };\r\n\r\n    /**\r\n     * Deletes a post.\r\n     * @param {String} appKey\r\n     * @param {String} postid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @param {Boolean} publish\r\n     * @return {Promise<Boolean|Error>} success or error\r\n     */\r\n    this.deletePost = function (appKey, postid, username, password, publish) {\r\n        return methodCall('blogger.deletePost', [appKey, postid, username, password, publish]);\r\n    };\r\n\r\n    /**\r\n     * Uploads a new file.\r\n     * @param {String} blogid\r\n     * @param {String} username\r\n     * @param {String} password\r\n     * @param {MediaObject} mediaObject\r\n     * @return {Promise<MediaObject|Error>}\r\n     */\r\n    this.newMediaObject = function (blogid, username, password, mediaObject) {\r\n        return methodCall('metaWeblog.newMediaObject', [blogid, username, password, mediaObject]);\r\n    };\r\n};\r\n\r\nexports = module.exports = MetaWeblog;\r\n\r\n/**\r\n * Struct BlogInfo\r\n * @typedef {Object} BlogInfo\r\n * @property {String} blogid\r\n * @property {String} url\r\n * @property {String} blogName\r\n */\r\n\r\n/**\r\n * Struct Post\r\n * @typedef {Object} Post\r\n * @property {Date} dateCreated - Required when posting.\r\n * @property {String} description - Required when posting.\r\n * @property {String} title - Required when posting.\r\n * @property {String[]} [categories]\r\n * @property {String} [link]\r\n * @property {String} [permalink]\r\n * @property {String} [postid]\r\n * @property {Source} [source]\r\n * @property {String} [userid]\r\n * @property {any} [...] - other properties not listed in this doc.\r\n */\r\n\r\n/**\r\n * Struct CategoryInfo\r\n * @typedef {Object} CategoryInfo\r\n * @property {String} description\r\n * @property {String} htmlUrl\r\n * @property {String} rssUrl\r\n * @property {String} title\r\n * @property {String} categoryid\r\n */\r\n\r\n/**\r\n * Struct MediaObject\r\n * @typedef {Object} MediaObject\r\n * @property {String} name\r\n * @property {String} type\r\n * @property {base64} bits\r\n */\r\n\r\n/**\r\n * Struct Source\r\n * @typedef {Object} Source\r\n * @property {String} [name]\r\n * @property {String} [url]\r\n */\r\n\r\n/**\r\n * Struct UrlData\r\n * @typedef {Object} UrlData\r\n * @property {String} url\r\n */\r\n\r\n/**\r\n * Struct Error\r\n * @typedef {Object} Error\r\n * @property {String} faultCode\r\n * @property {String} faultString\r\n */"],"mappings":"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"},"metadata":{},"sourceType":"script"}