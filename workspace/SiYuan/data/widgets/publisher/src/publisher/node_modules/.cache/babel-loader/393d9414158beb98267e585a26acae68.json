{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n// Generated by CoffeeScript 1.10.0\n(function () {\n  var XMLStringifier,\n      camelCase,\n      kebabCase,\n      ref,\n      snakeCase,\n      titleCase,\n      bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n      hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), camelCase = ref.camelCase, titleCase = ref.titleCase, kebabCase = ref.kebabCase, snakeCase = ref.snakeCase;\n\n  module.exports = XMLStringifier = function () {\n    function XMLStringifier(options) {\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref1, value;\n      options || (options = {});\n      this.allowSurrogateChars = options.allowSurrogateChars;\n      this.noDoubleEncoding = options.noDoubleEncoding;\n      this.textCase = options.textCase;\n      ref1 = options.stringify || {};\n\n      for (key in ref1) {\n        if (!hasProp.call(ref1, key)) continue;\n        value = ref1[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.eleName = function (val) {\n      val = '' + val || '';\n      val = this.applyCase(val);\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.eleText = function (val) {\n      val = '' + val || '';\n      return this.assertLegalChar(this.elEscape(val));\n    };\n\n    XMLStringifier.prototype.cdata = function (val) {\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function (val) {\n      val = '' + val || '';\n\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attName = function (val) {\n      val = '' + val || '';\n      return val = this.applyCase(val);\n    };\n\n    XMLStringifier.prototype.attValue = function (val) {\n      val = '' + val || '';\n      return this.attEscape(val);\n    };\n\n    XMLStringifier.prototype.insTarget = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.insValue = function (val) {\n      val = '' + val || '';\n\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlVersion = function (val) {\n      val = '' + val || '';\n\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function (val) {\n      val = '' + val || '';\n\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function (val) {\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdSysID = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttType = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function (val) {\n      if (val != null) {\n        return '' + val || '';\n      } else {\n        return val;\n      }\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdNData = function (val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function (str) {\n      var chars, chr;\n\n      if (this.allowSurrogateChars) {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n      } else {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n      }\n\n      chr = str.match(chars);\n\n      if (chr) {\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n      }\n\n      return str;\n    };\n\n    XMLStringifier.prototype.applyCase = function (str) {\n      switch (this.textCase) {\n        case \"camel\":\n          return camelCase(str);\n\n        case \"title\":\n          return titleCase(str);\n\n        case \"kebab\":\n        case \"lower\":\n          return kebabCase(str);\n\n        case \"snake\":\n          return snakeCase(str);\n\n        case \"upper\":\n          return kebabCase(str).toUpperCase();\n\n        default:\n          return str;\n      }\n    };\n\n    XMLStringifier.prototype.elEscape = function (str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function (str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n  }();\n}).call(this);","map":{"version":3,"names":["XMLStringifier","camelCase","kebabCase","ref","snakeCase","titleCase","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","require","module","exports","options","assertLegalChar","key","ref1","value","allowSurrogateChars","noDoubleEncoding","textCase","stringify","call","prototype","eleName","val","applyCase","eleText","elEscape","cdata","replace","comment","match","Error","raw","attName","attValue","attEscape","insTarget","insValue","xmlVersion","xmlEncoding","xmlStandalone","dtdPubID","dtdSysID","dtdElementValue","dtdAttType","dtdAttDefault","dtdEntityValue","dtdNData","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey","str","chars","chr","index","toUpperCase","ampregex"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/node_modules/xmlbuilder/lib/XMLStringifier.js"],"sourcesContent":["// Generated by CoffeeScript 1.10.0\n(function() {\n  var XMLStringifier, camelCase, kebabCase, ref, snakeCase, titleCase,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), camelCase = ref.camelCase, titleCase = ref.titleCase, kebabCase = ref.kebabCase, snakeCase = ref.snakeCase;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref1, value;\n      options || (options = {});\n      this.allowSurrogateChars = options.allowSurrogateChars;\n      this.noDoubleEncoding = options.noDoubleEncoding;\n      this.textCase = options.textCase;\n      ref1 = options.stringify || {};\n      for (key in ref1) {\n        if (!hasProp.call(ref1, key)) continue;\n        value = ref1[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.eleName = function(val) {\n      val = '' + val || '';\n      val = this.applyCase(val);\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.eleText = function(val) {\n      val = '' + val || '';\n      return this.assertLegalChar(this.elEscape(val));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attName = function(val) {\n      val = '' + val || '';\n      return val = this.applyCase(val);\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      val = '' + val || '';\n      return this.attEscape(val);\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (val != null) {\n        return '' + val || '';\n      } else {\n        return val;\n      }\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var chars, chr;\n      if (this.allowSurrogateChars) {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n      } else {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n      }\n      chr = str.match(chars);\n      if (chr) {\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.applyCase = function(str) {\n      switch (this.textCase) {\n        case \"camel\":\n          return camelCase(str);\n        case \"title\":\n          return titleCase(str);\n        case \"kebab\":\n        case \"lower\":\n          return kebabCase(str);\n        case \"snake\":\n          return snakeCase(str);\n        case \"upper\":\n          return kebabCase(str).toUpperCase();\n        default:\n          return str;\n      }\n    };\n\n    XMLStringifier.prototype.elEscape = function(str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}