{"ast":null,"code":"import { getPage, getWidgetId } from \"../lib/siyuanUtil\";\nimport { getConf, setConf } from \"../lib/config\";\nimport { getApiParams } from \"../lib/publish/publishUtil\";\nimport { slugify } from 'transliteration';\nimport jsYaml from \"js-yaml\";\n/**\n * 获取本地缓存的思源笔记页面ID\n * @param force\n * true 强制调用查询不获取缓存\n * false 优先读取本地缓存，缓存不存在再去查询\n * @returns {Promise<*|string>}\n */\n\nexport async function getSiyuanPageId(force) {\n  const page = await getSiyuanPage(force);\n  const pageId = page.root_id || \"\";\n  console.log(\"获取思源笔记页面ID=>\", pageId);\n  return pageId;\n}\n/**\n * 获取本地缓存的思源笔记页面信息（不是实时的）\n * @param force true代表强制调用查询不获取缓存\n * @returns {Promise<any>}\n */\n\nexport async function getSiyuanPage(force) {\n  const widgetId = await getWidgetId(); // 默认读取缓存\n\n  const pageObj = getConf(widgetId);\n\n  if (!force && pageObj) {\n    console.log(\"获取本地缓存的思源笔记页面信息（不是实时的）=>\", pageObj);\n    return pageObj;\n  } // 如果本地不存在，或者需要强制读取，调用api查询\n\n\n  const page = await getPage(widgetId);\n\n  if (page) {\n    await setConf(widgetId, page);\n    console.warn(\"调用API设置查询思源页面信息并更新本地缓存\", page);\n  }\n\n  return page;\n}\n/**\n * 根据平台类型获取发布状态\n * @param apiType 平台类型\n * @param meta 元数据\n */\n\nexport function getPublishStatus(apiType, meta) {\n  const postidKey = getApiParams(apiType).postidKey;\n  const postId = meta[postidKey] || \"\";\n  return postId === \"\";\n}\n/**\n * 中文翻译成英文别名\n * @param q\n * @returns {Promise<unknown>}\n */\n\nexport async function zhSlugify(q) {\n  const v = await fetch('https://clients5.google.com/translate_a/t?client=dict-chrome-ex&sl=auto&tl=en-US&q=' + q);\n  let json = await v.json();\n  let res = json[0][0];\n  res = res.replaceAll(/-/g, \"\");\n  console.log(\"res=>\", res);\n  return slugify(res);\n}\nexport function yaml2Obj(yaml) {\n  let doc = \"\"; // Get document, or throw exception on error\n\n  try {\n    yaml = yaml.replace(\"---\\n\", \"\");\n    yaml = yaml.replace(\"---\", \"\");\n    doc = jsYaml.load(yaml); // console.log(doc);\n  } catch (e) {\n    console.error(e);\n  }\n\n  return doc;\n}\nexport function obj2yaml(obj) {\n  // https://npmmirror.com/package/js-yaml\n  let res = jsYaml.dump(obj);\n  res = \"---\\n\" + res + \"---\";\n  return res;\n} // function test() {\n//     const obj = {\n//         title: \"把npm依赖转换为本地依赖\",\n//         date: \"2022-07-09 15:16:00\",\n//         permalink: \"/post/convert-npm-dependencies-to-local.html\",\n//         meta: [\n//             {\n//                 name: \"keywords\",\n//                 content: \"npm dependency\"\n//             },\n//             {\n//                 name: \"description\",\n//                 content: \"把npm依赖转换为本地依赖有的时候，当我们要使用额第三方库停止维护之后，我们想自己修改代码才能达到某个需求。但是npm默认是只读的，下次运行依赖管理会覆盖代码。缘由要在上面陈述的情况，我们可以把npm依赖库转换为本地依赖，这样就不再受包管理器约束，我们就可以自定义修改代码了方案先删除npm中依赖yarnremove@oaktreehouse/vuepresspluginencrypt森岛帆高\"\n//             }\n//         ],\n//         categories: [\n//             \"博文\", \"实用技巧\"\n//         ],\n//         tags: [\n//             \"npm\", \"dependency\"\n//         ],\n//         author: {\n//             name: \"terwer\",\n//             link: \"https://github.com/terwer\"\n//         }\n//     };\n//     const yamlResult = obj2yaml(obj)\n//     console.log(\"yamlResult=>\")\n//     console.log(yamlResult)\n//\n//     const objResult = yaml2Obj(yamlResult)\n//     console.log(\"objResult=>\")\n//     console.log(objResult)\n// }\n//\n// test()\n// babel-node src/lib/util.js\n\n/**\n * 转换ISO日期为数字日期\n * @param str '2022-07-18T06:25:48.000Z\n * @returns {string|*}\n */\n\nexport const formatIsoDate = str => {\n  if (!str) {\n    return \"\";\n  }\n\n  let newstr = str; // https://www.regextester.com/112232\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n  const isoDateRegex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(.\\d{3})Z$/gm;\n  const matches = newstr.match(isoDateRegex);\n\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const dts = match.split(\"T\");\n    const d = dts[0].replaceAll(/-/g, \"\");\n    const t = dts[1].split(\".\")[0].replaceAll(/:/g, \"\");\n    const result = d + t;\n    newstr = newstr.replace(match, result);\n    console.log(\"formatIsoDate match=>\", match);\n    console.log(\"formatIsoDate result=>\", result);\n  }\n\n  return newstr;\n};\n/**\n * 转换ISO日期为中文日期\n * @param str '2022-07-18T06:25:48.000Z\n * @returns {string|*}\n */\n\nexport const formatZhDate = str => {\n  if (!str) {\n    return \"\";\n  }\n\n  let newstr = str; // https://www.regextester.com/112232\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n  const isoDateRegex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(.\\d{3})Z$/gm;\n  const matches = newstr.match(isoDateRegex);\n\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const dts = match.split(\"T\");\n    const d = dts[0];\n    const t = dts[1].split(\".\")[0];\n    const result = d + \" \" + t;\n    newstr = newstr.replace(match, result);\n    console.log(\"formatZhDate match=>\", match);\n    console.log(\"formatZhDate result=>\", result);\n  } // console.log(\"formatZhDate=>\", newstr)\n\n\n  return newstr;\n}; // ✅ Or get a Date object with the specified Time zone\n\nfunction changeTimeZone(date, timeZone) {\n  if (typeof date === 'string') {\n    return new Date(new Date(date).toLocaleString('zh-CN', {\n      timeZone\n    }));\n  }\n\n  return new Date(date.toLocaleString('zh-CN', {\n    timeZone\n  }));\n}\n/**\n *   字符转Date\n * @param dateString dateString should be in ISO format: \"yyyy-mm-dd\", \"yyyy-mm\" or \"yyyy\" or yyyymmddsss\n * @returns {Date}\n */\n\n\nexport function covertStringToDate(dateString) {\n  const onlyNumbers = dateString.replace(/\\D/g, \"\"); // console.log(\"onlyNumbers=>\", onlyNumbers)\n\n  const year = onlyNumbers.slice(0, 4);\n  const month = onlyNumbers.slice(4, 6);\n  const day = onlyNumbers.slice(6, 8);\n  const hour = onlyNumbers.slice(8, 10);\n  const min = onlyNumbers.slice(10, 12);\n  const sec = onlyNumbers.slice(12, 14);\n  let datestr = year;\n\n  if (!month) {\n    datestr = year;\n  } else if (!day) {\n    datestr = year + \"-\" + month;\n  } else if (!hour) {\n    datestr = year + \"-\" + month + \"-\" + day;\n  } else if (!min) {\n    datestr = year + \"-\" + month + \"-\" + day + \" \" + hour;\n  } else if (!sec) {\n    datestr = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + min;\n  } else {\n    datestr = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + min + \":\" + sec;\n  } // console.log(\"datestr=>\", datestr)\n\n\n  return changeTimeZone(datestr, 'Asia/Shanghai');\n} // const date = covertStringToDate('20220718142548');\n// // const timeZone = 'Asia/Shanghai'\n// // const datestr = date.toLocaleString('zh-CN', {\n// //     timeZone,\n// // });\n// const obj = {\n//     title: \"测试，这里有T，也有.000Z啊\",\n//     date: date\n// }\n// const yaml = obj2yaml(obj)\n// console.log(\"yaml=>\")\n// console.log(yaml)\n// const fmt = formatIsoDate(yaml)\n// console.log(\"fmt=>\")\n// console.log(fmt)","map":{"version":3,"names":["getPage","getWidgetId","getConf","setConf","getApiParams","slugify","jsYaml","getSiyuanPageId","force","page","getSiyuanPage","pageId","root_id","console","log","widgetId","pageObj","warn","getPublishStatus","apiType","meta","postidKey","postId","zhSlugify","q","v","fetch","json","res","replaceAll","yaml2Obj","yaml","doc","replace","load","e","error","obj2yaml","obj","dump","formatIsoDate","str","newstr","isoDateRegex","matches","match","i","length","dts","split","d","t","result","formatZhDate","changeTimeZone","date","timeZone","Date","toLocaleString","covertStringToDate","dateString","onlyNumbers","year","slice","month","day","hour","min","sec","datestr"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/src/lib/util.js"],"sourcesContent":["import {getPage, getWidgetId} from \"../lib/siyuanUtil\";\nimport {getConf, setConf} from \"../lib/config\";\nimport {getApiParams} from \"../lib/publish/publishUtil\";\nimport {slugify} from 'transliteration';\nimport jsYaml from \"js-yaml\";\n\n/**\n * 获取本地缓存的思源笔记页面ID\n * @param force\n * true 强制调用查询不获取缓存\n * false 优先读取本地缓存，缓存不存在再去查询\n * @returns {Promise<*|string>}\n */\nexport async function getSiyuanPageId(force) {\n    const page = await getSiyuanPage(force);\n\n    const pageId = page.root_id || \"\"\n    console.log(\"获取思源笔记页面ID=>\", pageId)\n    return pageId\n}\n\n/**\n * 获取本地缓存的思源笔记页面信息（不是实时的）\n * @param force true代表强制调用查询不获取缓存\n * @returns {Promise<any>}\n */\nexport async function getSiyuanPage(force) {\n    const widgetId = await getWidgetId()\n    // 默认读取缓存\n    const pageObj = getConf(widgetId);\n    if (!force && pageObj) {\n        console.log(\"获取本地缓存的思源笔记页面信息（不是实时的）=>\", pageObj)\n        return pageObj;\n    }\n\n    // 如果本地不存在，或者需要强制读取，调用api查询\n    const page = await getPage(widgetId);\n    if (page) {\n        await setConf(widgetId, page)\n        console.warn(\"调用API设置查询思源页面信息并更新本地缓存\", page)\n    }\n    return page;\n}\n\n/**\n * 根据平台类型获取发布状态\n * @param apiType 平台类型\n * @param meta 元数据\n */\nexport function getPublishStatus(apiType, meta) {\n    const postidKey = getApiParams(apiType).postidKey;\n    const postId = meta[postidKey] || \"\";\n    return postId === \"\";\n}\n\n/**\n * 中文翻译成英文别名\n * @param q\n * @returns {Promise<unknown>}\n */\nexport async function zhSlugify(q) {\n    const v = await fetch('https://clients5.google.com/translate_a/t?client=dict-chrome-ex&sl=auto&tl=en-US&q=' + q);\n    let json = await v.json()\n    let res = json[0][0];\n    res = res.replaceAll(/-/g, \"\");\n    console.log(\"res=>\", res)\n    return slugify(res);\n}\n\nexport function yaml2Obj(yaml) {\n    let doc = \"\";\n    // Get document, or throw exception on error\n    try {\n        yaml = yaml.replace(\"---\\n\", \"\")\n        yaml = yaml.replace(\"---\", \"\")\n        doc = jsYaml.load(yaml);\n        // console.log(doc);\n    } catch (e) {\n        console.error(e);\n    }\n    return doc;\n}\n\nexport function obj2yaml(obj) {\n    // https://npmmirror.com/package/js-yaml\n    let res = jsYaml.dump(obj);\n    res = \"---\\n\" + res + \"---\"\n    return res;\n}\n\n// function test() {\n//     const obj = {\n//         title: \"把npm依赖转换为本地依赖\",\n//         date: \"2022-07-09 15:16:00\",\n//         permalink: \"/post/convert-npm-dependencies-to-local.html\",\n//         meta: [\n//             {\n//                 name: \"keywords\",\n//                 content: \"npm dependency\"\n//             },\n//             {\n//                 name: \"description\",\n//                 content: \"把npm依赖转换为本地依赖有的时候，当我们要使用额第三方库停止维护之后，我们想自己修改代码才能达到某个需求。但是npm默认是只读的，下次运行依赖管理会覆盖代码。缘由要在上面陈述的情况，我们可以把npm依赖库转换为本地依赖，这样就不再受包管理器约束，我们就可以自定义修改代码了方案先删除npm中依赖yarnremove@oaktreehouse/vuepresspluginencrypt森岛帆高\"\n//             }\n//         ],\n//         categories: [\n//             \"博文\", \"实用技巧\"\n//         ],\n//         tags: [\n//             \"npm\", \"dependency\"\n//         ],\n//         author: {\n//             name: \"terwer\",\n//             link: \"https://github.com/terwer\"\n//         }\n//     };\n//     const yamlResult = obj2yaml(obj)\n//     console.log(\"yamlResult=>\")\n//     console.log(yamlResult)\n//\n//     const objResult = yaml2Obj(yamlResult)\n//     console.log(\"objResult=>\")\n//     console.log(objResult)\n// }\n//\n// test()\n\n// babel-node src/lib/util.js\n\n/**\n * 转换ISO日期为数字日期\n * @param str '2022-07-18T06:25:48.000Z\n * @returns {string|*}\n */\nexport const formatIsoDate = (str) => {\n    if (!str) {\n        return \"\";\n    }\n    let newstr = str;\n\n    // https://www.regextester.com/112232\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n    const isoDateRegex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(.\\d{3})Z$/gm;\n    const matches = newstr.match(isoDateRegex);\n    for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        const dts = match.split(\"T\")\n        const d = dts[0].replaceAll(/-/g, \"\")\n        const t = dts[1].split(\".\")[0].replaceAll(/:/g, \"\")\n\n        const result = d + t;\n\n        newstr = newstr.replace(match, result)\n        console.log(\"formatIsoDate match=>\", match)\n        console.log(\"formatIsoDate result=>\", result)\n    }\n\n    return newstr;\n}\n\n/**\n * 转换ISO日期为中文日期\n * @param str '2022-07-18T06:25:48.000Z\n * @returns {string|*}\n */\nexport const formatZhDate = (str) => {\n    if (!str) {\n        return \"\";\n    }\n    let newstr = str;\n\n    // https://www.regextester.com/112232\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n    const isoDateRegex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(.\\d{3})Z$/gm;\n    const matches = newstr.match(isoDateRegex);\n    for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        const dts = match.split(\"T\")\n        const d = dts[0]\n        const t = dts[1].split(\".\")[0]\n\n        const result = d + \" \" + t;\n\n        newstr = newstr.replace(match, result)\n        console.log(\"formatZhDate match=>\", match)\n        console.log(\"formatZhDate result=>\", result)\n    }\n\n    // console.log(\"formatZhDate=>\", newstr)\n    return newstr;\n}\n\n// ✅ Or get a Date object with the specified Time zone\nfunction changeTimeZone(date, timeZone) {\n    if (typeof date === 'string') {\n        return new Date(\n            new Date(date).toLocaleString('zh-CN', {\n                timeZone,\n            }),\n        );\n    }\n\n    return new Date(\n        date.toLocaleString('zh-CN', {\n            timeZone,\n        }),\n    );\n}\n\n/**\n *   字符转Date\n * @param dateString dateString should be in ISO format: \"yyyy-mm-dd\", \"yyyy-mm\" or \"yyyy\" or yyyymmddsss\n * @returns {Date}\n */\nexport function covertStringToDate(dateString) {\n    const onlyNumbers = dateString.replace(/\\D/g, \"\");\n    // console.log(\"onlyNumbers=>\", onlyNumbers)\n    const year = onlyNumbers.slice(0, 4)\n    const month = onlyNumbers.slice(4, 6)\n    const day = onlyNumbers.slice(6, 8)\n    const hour = onlyNumbers.slice(8, 10)\n    const min = onlyNumbers.slice(10, 12)\n    const sec = onlyNumbers.slice(12, 14)\n\n    let datestr = year;\n    if (!month) {\n        datestr = year;\n    } else if (!day) {\n        datestr = year + \"-\" + month\n    } else if (!hour) {\n        datestr = year + \"-\" + month + \"-\" + day\n    } else if (!min) {\n        datestr = year + \"-\" + month + \"-\" + day + \" \" + hour\n    } else if (!sec) {\n        datestr = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + min\n    } else {\n        datestr = year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + min + \":\" + sec\n    }\n\n    // console.log(\"datestr=>\", datestr)\n    return changeTimeZone(datestr, 'Asia/Shanghai')\n}\n\n// const date = covertStringToDate('20220718142548');\n// // const timeZone = 'Asia/Shanghai'\n// // const datestr = date.toLocaleString('zh-CN', {\n// //     timeZone,\n// // });\n// const obj = {\n//     title: \"测试，这里有T，也有.000Z啊\",\n//     date: date\n// }\n// const yaml = obj2yaml(obj)\n// console.log(\"yaml=>\")\n// console.log(yaml)\n\n// const fmt = formatIsoDate(yaml)\n// console.log(\"fmt=>\")\n// console.log(fmt)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}