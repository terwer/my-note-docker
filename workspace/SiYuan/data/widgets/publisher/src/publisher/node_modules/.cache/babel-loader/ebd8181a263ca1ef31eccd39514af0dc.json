{"ast":null,"code":"const showdown = require(\"showdown\");\n\nconst converter = new showdown.Converter();\n/**\n * 将Markdown转换为HTML\n * @param md Markdown\n * @returns {*} HTML\n */\n\nexport function mdToHtml(md) {\n  let html = converter.makeHtml(md);\n  return removeWidgetTag(html);\n}\n/**\n * 删除挂件的HTML\n * @param str 原字符\n * @returns {*|string} 删除后的字符\n */\n\nexport function removeWidgetTag(str) {\n  const publisherRegex = /<iframe.*src=\"\\/widgets\\/publisher.*<\\/iframe>/g;\n  str = str.replaceAll(publisherRegex, \"\");\n  const noteAttrRegex = /<iframe.*\\/widgets\\/Note*\\sAttrs.*\\/iframe>/g;\n  str = str.replaceAll(noteAttrRegex, \"\");\n  return str;\n}\n/**\n * 截取指定长度html\n * @param html html\n * @param length 长度\n * @param ignore 不要结尾省略号\n * @returns {string} 结果\n */\n\nexport function parseHtml(html, length, ignore) {\n  let allText = filterHtml(html);\n\n  if (allText.length < length) {\n    return allText;\n  }\n\n  if (ignore) {\n    return allText.substring(0, length);\n  }\n\n  return allText.substring(0, length) + \"...\";\n}\n/**\n * 去除html标签，残缺不全也可以\n * @param str\n * @returns {string} 转换后的结果\n */\n\nfunction filterHtml(str) {\n  /*\n   * <.*?>为正则表达式，其中的.表示任意字符，*?表示出现0次或0次以上，此方法可以去掉双头标签(双头针对于残缺的标签)\n   * \"<.*?\"表示<尖括号后的所有字符，此方法可以去掉残缺的标签，及后面的内容\n   * \" \"，若有多种此种字符，可用同一方法去除\n   */\n  str = str.replace(/<style((.|\\n|\\r)*?)<\\/style>/g, '');\n  str = str.replace(/<script((.|\\n|\\r)*?)<\\/script>/g, '');\n  str = str.replace(/<[^>]*>/g, '');\n  str = str.replace(/&.*;/g, '');\n  str = str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n  str = str.replace(/</g, \"\").replace(/>/g, \"\");\n  str = str.replace(/\"/g, \"\").replace(/'/g, \"\"); // 正则保留字符\n\n  str = str.replace(/\\*/g, \"\");\n  str = str.replace(/\\$/g, \"\");\n  str = str.replace(/\\./g, \"\");\n  str = str.replace(/\\+/g, \"\"); // 下面是行内空格，不建议去除\n\n  str = str.replace(/\\s+/g, ''); // 冒号分号替换成下划线\n\n  str = str.replace(/[:|：]/g, \"_\");\n  str = str.replace(/[;|；]/g, \"_\"); // 需要排除的字符\n\n  const excludeWords = ['\\\\d*/\\\\d/\\\\d*', '[、|\\\\\\\\]', '[，|,]', '\\\\d', '/', '-'];\n\n  for (let i = 0; i < excludeWords.length; i++) {\n    const regex = new RegExp(excludeWords[i], \"g\");\n    str = str.replaceAll(regex, \"\");\n  }\n\n  str = str.toLowerCase();\n  return str;\n}\n/**\n * 将Markdown转换为纯文本\n * @param md\n * @returns {string}\n */\n\n\nexport function mdToPlanText(md) {\n  let html = mdToHtml(md);\n  html = removeWidgetTag(html);\n  return filterHtml(html);\n}","map":{"version":3,"names":["showdown","require","converter","Converter","mdToHtml","md","html","makeHtml","removeWidgetTag","str","publisherRegex","replaceAll","noteAttrRegex","parseHtml","length","ignore","allText","filterHtml","substring","replace","excludeWords","i","regex","RegExp","toLowerCase","mdToPlanText"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/src/lib/htmlUtil.js"],"sourcesContent":["const showdown = require(\"showdown\")\nconst converter = new showdown.Converter();\n\n/**\n * 将Markdown转换为HTML\n * @param md Markdown\n * @returns {*} HTML\n */\nexport function mdToHtml(md) {\n    let html = converter.makeHtml(md);\n    return removeWidgetTag(html);\n}\n\n/**\n * 删除挂件的HTML\n * @param str 原字符\n * @returns {*|string} 删除后的字符\n */\nexport function removeWidgetTag(str) {\n    const publisherRegex = /<iframe.*src=\"\\/widgets\\/publisher.*<\\/iframe>/g;\n    str = str.replaceAll(publisherRegex, \"\")\n\n    const noteAttrRegex = /<iframe.*\\/widgets\\/Note*\\sAttrs.*\\/iframe>/g\n    str = str.replaceAll(noteAttrRegex, \"\")\n    return str\n}\n\n/**\n * 截取指定长度html\n * @param html html\n * @param length 长度\n * @param ignore 不要结尾省略号\n * @returns {string} 结果\n */\nexport function parseHtml(html, length, ignore) {\n    let allText = filterHtml(html);\n    if (allText.length < length) {\n        return allText;\n    }\n    if (ignore) {\n        return allText.substring(0, length);\n    }\n    return allText.substring(0, length) + \"...\";\n}\n\n/**\n * 去除html标签，残缺不全也可以\n * @param str\n * @returns {string} 转换后的结果\n */\nfunction filterHtml(str) {\n    /*\n     * <.*?>为正则表达式，其中的.表示任意字符，*?表示出现0次或0次以上，此方法可以去掉双头标签(双头针对于残缺的标签)\n     * \"<.*?\"表示<尖括号后的所有字符，此方法可以去掉残缺的标签，及后面的内容\n     * \" \"，若有多种此种字符，可用同一方法去除\n     */\n    str = str.replace(/<style((.|\\n|\\r)*?)<\\/style>/g, '')\n    str = str.replace(/<script((.|\\n|\\r)*?)<\\/script>/g, '')\n    str = str.replace(/<[^>]*>/g, '');\n    str = str.replace(/&.*;/g, '');\n    str = str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    str = str.replace(/</g, \"\").replace(/>/g, \"\")\n    str = str.replace(/\"/g, \"\").replace(/'/g, \"\")\n\n    // 正则保留字符\n    str = str.replace(/\\*/g, \"\")\n    str = str.replace(/\\$/g, \"\")\n    str = str.replace(/\\./g, \"\")\n    str = str.replace(/\\+/g, \"\")\n\n    // 下面是行内空格，不建议去除\n    str = str.replace(/\\s+/g, '');\n\n    // 冒号分号替换成下划线\n    str = str.replace(/[:|：]/g, \"_\")\n    str = str.replace(/[;|；]/g, \"_\")\n\n    // 需要排除的字符\n    const excludeWords = ['\\\\d*/\\\\d/\\\\d*', '[、|\\\\\\\\]', '[，|,]', '\\\\d', '/', '-']\n    for (let i = 0; i < excludeWords.length; i++) {\n        const regex = new RegExp(excludeWords[i], \"g\");\n        str = str.replaceAll(regex, \"\")\n    }\n\n    str = str.toLowerCase();\n    return str;\n}\n\n/**\n * 将Markdown转换为纯文本\n * @param md\n * @returns {string}\n */\nexport function mdToPlanText(md) {\n    let html = mdToHtml(md)\n    html = removeWidgetTag(html)\n    return filterHtml(html)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}