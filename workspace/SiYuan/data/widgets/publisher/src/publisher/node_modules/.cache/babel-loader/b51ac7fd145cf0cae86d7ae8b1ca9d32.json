{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/**\n * @class DateFormatter\n * The DateFormatter supports decoding from and encoding to\n * ISO8601 formatted strings. Accepts formats with and without\n * hyphen/colon separators and correctly parses zoning info.\n */\nvar DateFormatter = function (opts) {\n  this.opts = {};\n  this.setOpts(opts);\n};\n/**\n * Default options for DateFormatter\n * @static\n * @see DateFormatter#setOpts\n */\n\n\nDateFormatter.DEFAULT_OPTIONS = {\n  colons: true,\n  hyphens: false,\n  local: true,\n  ms: false,\n  offset: false\n};\n/**\n * Regular Expression that disects ISO 8601 formatted strings into\n * an array of parts.\n * @static\n */\n\nDateFormatter.ISO8601 = new RegExp('([0-9]{4})([-]?([0-9]{2}))([-]?([0-9]{2}))' + '(T([0-9]{2})(((:?([0-9]{2}))?((:?([0-9]{2}))?(\\.([0-9]+))?))?)' + '(Z|([+-]([0-9]{2}(:?([0-9]{2}))?)))?)?');\n/**\n * Sets options for encoding Date objects to ISO8601 strings.\n *    Omitting the 'opts' argument will reset all options to the default.\n *\n * @param {Object} opts - Options (optional)\n * @param {Boolean} opts.colons  - Enable/disable formatting the time portion\n *                                 with a colon as separator (default: true)\n * @param {Boolean} opts.hyphens - Enable/disable formatting the date portion\n *                                 with a hyphen as separator (default: false)\n * @param {Boolean} opts.local   - Encode as local time instead of UTC\n *                                 (default: true)\n * @param {Boolean} opts.ms      - Enable/Disable output of milliseconds\n *                                 (default: false)\n * @param {Boolean} opts.offset  - Enable/Disable output of UTC offset\n *                                 (default: false)\n */\n\nDateFormatter.prototype.setOpts = function (opts) {\n  if (!opts) opts = DateFormatter.DEFAULT_OPTIONS;\n  var ctx = this;\n  Object.keys(DateFormatter.DEFAULT_OPTIONS).forEach(function (k) {\n    ctx.opts[k] = opts.hasOwnProperty(k) ? opts[k] : DateFormatter.DEFAULT_OPTIONS[k];\n  });\n};\n/**\n * Converts a date time stamp following the ISO8601 format to a JavaScript Date\n * object.\n *\n * @param {String} time - String representation of timestamp.\n * @return {Date}       - Date object from timestamp.\n */\n\n\nDateFormatter.prototype.decodeIso8601 = function (time) {\n  var dateParts = time.toString().match(DateFormatter.ISO8601);\n\n  if (!dateParts) {\n    throw new Error('Expected a ISO8601 datetime but got \\'' + time + '\\'');\n  }\n\n  var date = [[dateParts[1], dateParts[3] || '01', dateParts[5] || '01'].join('-'), 'T', [dateParts[7] || '00', dateParts[11] || '00', dateParts[14] || '00'].join(':'), '.', dateParts[16] || '000'].join('');\n  date += dateParts[17] !== undefined ? dateParts[17] + (dateParts[19] && dateParts[20] === undefined ? '00' : '') : DateFormatter.formatCurrentOffset(new Date(date));\n  return new Date(date);\n};\n/**\n * Converts a JavaScript Date object to an ISO8601 timestamp.\n *\n * @param {Date} date - Date object.\n * @return {String}   - String representation of timestamp.\n */\n\n\nDateFormatter.prototype.encodeIso8601 = function (date) {\n  var parts = this.opts.local ? DateFormatter.getLocalDateParts(date) : DateFormatter.getUTCDateParts(date);\n  return [[parts[0], parts[1], parts[2]].join(this.opts.hyphens ? '-' : ''), 'T', [parts[3], parts[4], parts[5]].join(this.opts.colons ? ':' : ''), this.opts.ms ? '.' + parts[6] : '', this.opts.local ? this.opts.offset ? DateFormatter.formatCurrentOffset(date) : '' : 'Z'].join('');\n};\n/**\n * Helper function to get an array of zero-padded date parts,\n * in UTC\n *\n * @param {Date} date - Date Object\n * @return {String[]}\n */\n\n\nDateFormatter.getUTCDateParts = function (date) {\n  return [date.getUTCFullYear(), DateFormatter.zeroPad(date.getUTCMonth() + 1, 2), DateFormatter.zeroPad(date.getUTCDate(), 2), DateFormatter.zeroPad(date.getUTCHours(), 2), DateFormatter.zeroPad(date.getUTCMinutes(), 2), DateFormatter.zeroPad(date.getUTCSeconds(), 2), DateFormatter.zeroPad(date.getUTCMilliseconds(), 3)];\n};\n/**\n * Helper function to get an array of zero-padded date parts,\n * in the local time zone\n *\n * @param {Date} date - Date Object\n * @return {String[]}\n */\n\n\nDateFormatter.getLocalDateParts = function (date) {\n  return [date.getFullYear(), DateFormatter.zeroPad(date.getMonth() + 1, 2), DateFormatter.zeroPad(date.getDate(), 2), DateFormatter.zeroPad(date.getHours(), 2), DateFormatter.zeroPad(date.getMinutes(), 2), DateFormatter.zeroPad(date.getSeconds(), 2), DateFormatter.zeroPad(date.getMilliseconds(), 3)];\n};\n/**\n * Helper function to pad the digits with 0s to meet date formatting\n * requirements.\n *\n * @param {Number} digit  - The number to pad.\n * @param {Number} length - Length of digit string, prefix with 0s if not\n *                          already length.\n * @return {String}       - String with the padded digit\n */\n\n\nDateFormatter.zeroPad = function (digit, length) {\n  var padded = '' + digit;\n\n  while (padded.length < length) {\n    padded = '0' + padded;\n  }\n\n  return padded;\n};\n/**\n * Helper function to get the current timezone to default decoding to\n * rather than UTC. (for backward compatibility)\n *\n * @return {String} - in the format /Z|[+-]\\d{2}:\\d{2}/\n */\n\n\nDateFormatter.formatCurrentOffset = function (d) {\n  var offset = (d || new Date()).getTimezoneOffset();\n  return offset === 0 ? 'Z' : [offset < 0 ? '+' : '-', DateFormatter.zeroPad(Math.abs(Math.floor(offset / 60)), 2), ':', DateFormatter.zeroPad(Math.abs(offset % 60), 2)].join('');\n}; // export an instance of DateFormatter only.\n\n\nmodule.exports = new DateFormatter();","map":{"version":3,"names":["DateFormatter","opts","setOpts","DEFAULT_OPTIONS","colons","hyphens","local","ms","offset","ISO8601","RegExp","prototype","ctx","Object","keys","forEach","k","hasOwnProperty","decodeIso8601","time","dateParts","toString","match","Error","date","join","undefined","formatCurrentOffset","Date","encodeIso8601","parts","getLocalDateParts","getUTCDateParts","getUTCFullYear","zeroPad","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","digit","length","padded","d","getTimezoneOffset","Math","abs","floor","module","exports"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/node_modules/xmlrpc/lib/date_formatter.js"],"sourcesContent":["/**\n * @class DateFormatter\n * The DateFormatter supports decoding from and encoding to\n * ISO8601 formatted strings. Accepts formats with and without\n * hyphen/colon separators and correctly parses zoning info.\n */\nvar DateFormatter = function (opts) {\n  this.opts = {}\n  this.setOpts(opts)\n}\n\n/**\n * Default options for DateFormatter\n * @static\n * @see DateFormatter#setOpts\n */\nDateFormatter.DEFAULT_OPTIONS = {\n  colons: true\n, hyphens: false\n, local: true\n, ms: false\n, offset: false\n}\n\n/**\n * Regular Expression that disects ISO 8601 formatted strings into\n * an array of parts.\n * @static\n */\nDateFormatter.ISO8601 = new RegExp(\n  '([0-9]{4})([-]?([0-9]{2}))([-]?([0-9]{2}))'\n+ '(T([0-9]{2})(((:?([0-9]{2}))?((:?([0-9]{2}))?(\\.([0-9]+))?))?)'\n+ '(Z|([+-]([0-9]{2}(:?([0-9]{2}))?)))?)?'\n)\n\n/**\n * Sets options for encoding Date objects to ISO8601 strings.\n *    Omitting the 'opts' argument will reset all options to the default.\n *\n * @param {Object} opts - Options (optional)\n * @param {Boolean} opts.colons  - Enable/disable formatting the time portion\n *                                 with a colon as separator (default: true)\n * @param {Boolean} opts.hyphens - Enable/disable formatting the date portion\n *                                 with a hyphen as separator (default: false)\n * @param {Boolean} opts.local   - Encode as local time instead of UTC\n *                                 (default: true)\n * @param {Boolean} opts.ms      - Enable/Disable output of milliseconds\n *                                 (default: false)\n * @param {Boolean} opts.offset  - Enable/Disable output of UTC offset\n *                                 (default: false)\n */\nDateFormatter.prototype.setOpts = function (opts) {\n  if (!opts) opts = DateFormatter.DEFAULT_OPTIONS\n\n  var ctx = this\n  Object.keys(DateFormatter.DEFAULT_OPTIONS).forEach(function (k) {\n    ctx.opts[k] = opts.hasOwnProperty(k) ?\n      opts[k] : DateFormatter.DEFAULT_OPTIONS[k]\n  })\n}\n\n/**\n * Converts a date time stamp following the ISO8601 format to a JavaScript Date\n * object.\n *\n * @param {String} time - String representation of timestamp.\n * @return {Date}       - Date object from timestamp.\n */\nDateFormatter.prototype.decodeIso8601 = function(time) {\n  var dateParts = time.toString().match(DateFormatter.ISO8601)\n  if (!dateParts) {\n    throw new Error('Expected a ISO8601 datetime but got \\'' + time + '\\'')\n  }\n\n  var date = [\n    [dateParts[1], dateParts[3] || '01', dateParts[5] || '01'].join('-')\n    , 'T'\n    , [\n        dateParts[7] || '00'\n      , dateParts[11] || '00'\n      , dateParts[14] || '00'\n      ].join(':')\n    , '.'\n    , dateParts[16] || '000'\n  ].join('')\n\n  date += (dateParts[17] !== undefined) ?\n    dateParts[17] +\n      ((dateParts[19] && dateParts[20] === undefined) ? '00' : '') :\n    DateFormatter.formatCurrentOffset(new Date(date))\n\n  return new Date(date)\n}\n\n/**\n * Converts a JavaScript Date object to an ISO8601 timestamp.\n *\n * @param {Date} date - Date object.\n * @return {String}   - String representation of timestamp.\n */\nDateFormatter.prototype.encodeIso8601 = function(date) {\n  var parts = this.opts.local ?\n    DateFormatter.getLocalDateParts(date) :\n    DateFormatter.getUTCDateParts(date)\n\n  return [\n    [parts[0],parts[1],parts[2]].join(this.opts.hyphens ? '-' : '')\n  , 'T'\n  , [parts[3],parts[4],parts[5]].join(this.opts.colons ? ':' : '')\n  , (this.opts.ms) ? '.' + parts[6] : ''\n  , (this.opts.local) ? ((this.opts.offset) ?\n      DateFormatter.formatCurrentOffset(date) : '') : 'Z'\n  ].join('')\n}\n\n/**\n * Helper function to get an array of zero-padded date parts,\n * in UTC\n *\n * @param {Date} date - Date Object\n * @return {String[]}\n */\nDateFormatter.getUTCDateParts = function (date) {\n  return [\n    date.getUTCFullYear()\n  , DateFormatter.zeroPad(date.getUTCMonth()+1,2)\n  , DateFormatter.zeroPad(date.getUTCDate(),2)\n  , DateFormatter.zeroPad(date.getUTCHours(), 2)\n  , DateFormatter.zeroPad(date.getUTCMinutes(), 2)\n  , DateFormatter.zeroPad(date.getUTCSeconds(), 2)\n  , DateFormatter.zeroPad(date.getUTCMilliseconds(), 3)]\n}\n\n\n/**\n * Helper function to get an array of zero-padded date parts,\n * in the local time zone\n *\n * @param {Date} date - Date Object\n * @return {String[]}\n */\nDateFormatter.getLocalDateParts = function (date) {\n  return [\n    date.getFullYear()\n  , DateFormatter.zeroPad(date.getMonth()+1,2)\n  , DateFormatter.zeroPad(date.getDate(),2)\n  , DateFormatter.zeroPad(date.getHours(), 2)\n  , DateFormatter.zeroPad(date.getMinutes(), 2)\n  , DateFormatter.zeroPad(date.getSeconds(), 2)\n  , DateFormatter.zeroPad(date.getMilliseconds(), 3)]\n}\n\n/**\n * Helper function to pad the digits with 0s to meet date formatting\n * requirements.\n *\n * @param {Number} digit  - The number to pad.\n * @param {Number} length - Length of digit string, prefix with 0s if not\n *                          already length.\n * @return {String}       - String with the padded digit\n */\nDateFormatter.zeroPad = function (digit, length) {\n  var padded = '' + digit\n  while (padded.length < length) {\n    padded = '0' + padded\n  }\n\n  return padded\n}\n\n/**\n * Helper function to get the current timezone to default decoding to\n * rather than UTC. (for backward compatibility)\n *\n * @return {String} - in the format /Z|[+-]\\d{2}:\\d{2}/\n */\nDateFormatter.formatCurrentOffset = function (d) {\n  var offset = (d || new Date()).getTimezoneOffset()\n  return (offset === 0) ? 'Z' : [\n      (offset < 0) ? '+' : '-'\n    , DateFormatter.zeroPad(Math.abs(Math.floor(offset/60)),2)\n    , ':'\n    , DateFormatter.zeroPad(Math.abs(offset%60),2)\n  ].join('')\n}\n\n// export an instance of DateFormatter only.\nmodule.exports = new DateFormatter()\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}