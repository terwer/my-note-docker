{"ast":null,"code":"import { getPage, getWidgetId } from \"@/lib/siyuanUtil\";\nimport { getConf, setConf } from \"@/lib/config\";\nimport { getApiParams } from \"@/lib/publish/publishUtil\";\nimport { slugify } from 'transliteration';\n/**\n * 获取本地缓存的思源笔记页面ID\n * @param force\n * true 强制调用查询不获取缓存\n * false 优先读取本地缓存，缓存不存在再去查询\n * @returns {Promise<*|string>}\n */\n\nexport async function getSiyuanPageId(force) {\n  const page = await getSiyuanPage(force);\n  const pageId = page.root_id || \"\";\n  console.log(\"获取思源笔记页面ID=>\", pageId);\n  return pageId;\n}\n/**\n * 获取本地缓存的思源笔记页面信息（不是实时的）\n * @param force true代表强制调用查询不获取缓存\n * @returns {Promise<any>}\n */\n\nexport async function getSiyuanPage(force) {\n  const widgetId = await getWidgetId(); // 默认读取缓存\n\n  const pageObj = getConf(widgetId);\n\n  if (!force && pageObj) {\n    console.log(\"获取本地缓存的思源笔记页面信息（不是实时的）=>\", pageObj);\n    return pageObj;\n  } // 如果本地不存在，或者需要强制读取，调用api查询\n\n\n  const page = await getPage(widgetId);\n\n  if (page) {\n    await setConf(widgetId, page);\n    console.warn(\"调用API设置查询思源页面信息并更新本地缓存\", page);\n  }\n\n  return page;\n}\n/**\n * 根据平台类型获取发布状态\n * @param apiType 平台类型\n * @param meta 元数据\n */\n\nexport function getPublishStatus(apiType, meta) {\n  const postidKey = getApiParams(apiType).postidKey;\n  const postId = meta[postidKey] || \"\";\n  return postId === \"\";\n}\n/**\n * 中文翻译成英文别名\n * @param q\n * @returns {Promise<unknown>}\n */\n\nexport async function zhSlugify(q) {\n  return new Promise((resolve, reject) => {\n    fetch('https://clients5.google.com/translate_a/t?client=dict-chrome-ex&sl=auto&tl=en-US&q=' + q).then(v => v.json()).then(v => {\n      let res = v[0][0];\n      res = res.replaceAll(/-/g, \"\"); // let wordArr = res.split(\" \");\n      // let slug = wordArr.join(\"-\").toLowerCase();\n\n      console.log(\"res=>\", res);\n      const slug = slugify(res); // let postTitle = \"/post/\" + slug + \".html\";\n      // console.log(slug);\n      // console.log(\"\");\n      // console.log(postTitle)\n\n      console.log(\"slug=>\", slug);\n      resolve(slug); // resolve(slug, postTitle)\n    }).catch(err => {\n      console.log(err);\n      reject(err);\n    });\n  });\n}","map":{"version":3,"names":["getPage","getWidgetId","getConf","setConf","getApiParams","slugify","getSiyuanPageId","force","page","getSiyuanPage","pageId","root_id","console","log","widgetId","pageObj","warn","getPublishStatus","apiType","meta","postidKey","postId","zhSlugify","q","Promise","resolve","reject","fetch","then","v","json","res","replaceAll","slug","catch","err"],"sources":["/Users/terwer/Documents/mydocs/my-note-docker/workspace/SiYuan/data/widgets/publisher/src/publisher/src/lib/util.js"],"sourcesContent":["import {getPage, getWidgetId} from \"@/lib/siyuanUtil\";\nimport {getConf, setConf} from \"@/lib/config\";\nimport {getApiParams} from \"@/lib/publish/publishUtil\";\nimport {slugify} from 'transliteration';\n\n/**\n * 获取本地缓存的思源笔记页面ID\n * @param force\n * true 强制调用查询不获取缓存\n * false 优先读取本地缓存，缓存不存在再去查询\n * @returns {Promise<*|string>}\n */\nexport async function getSiyuanPageId(force) {\n    const page = await getSiyuanPage(force);\n\n    const pageId = page.root_id || \"\"\n    console.log(\"获取思源笔记页面ID=>\", pageId)\n    return pageId\n}\n\n/**\n * 获取本地缓存的思源笔记页面信息（不是实时的）\n * @param force true代表强制调用查询不获取缓存\n * @returns {Promise<any>}\n */\nexport async function getSiyuanPage(force) {\n    const widgetId = await getWidgetId()\n    // 默认读取缓存\n    const pageObj = getConf(widgetId);\n    if (!force && pageObj) {\n        console.log(\"获取本地缓存的思源笔记页面信息（不是实时的）=>\", pageObj)\n        return pageObj;\n    }\n\n    // 如果本地不存在，或者需要强制读取，调用api查询\n    const page = await getPage(widgetId);\n    if (page) {\n        await setConf(widgetId, page)\n        console.warn(\"调用API设置查询思源页面信息并更新本地缓存\", page)\n    }\n    return page;\n}\n\n/**\n * 根据平台类型获取发布状态\n * @param apiType 平台类型\n * @param meta 元数据\n */\nexport function getPublishStatus(apiType, meta) {\n    const postidKey = getApiParams(apiType).postidKey;\n    const postId = meta[postidKey] || \"\";\n    return postId === \"\";\n}\n\n/**\n * 中文翻译成英文别名\n * @param q\n * @returns {Promise<unknown>}\n */\nexport async function zhSlugify(q) {\n    return new Promise((resolve, reject) => {\n        fetch('https://clients5.google.com/translate_a/t?client=dict-chrome-ex&sl=auto&tl=en-US&q=' + q)\n            .then(v => v.json()).then((v) => {\n            let res = v[0][0];\n            res = res.replaceAll(/-/g, \"\");\n            // let wordArr = res.split(\" \");\n            // let slug = wordArr.join(\"-\").toLowerCase();\n            console.log(\"res=>\", res)\n            const slug = slugify(res);\n            // let postTitle = \"/post/\" + slug + \".html\";\n            // console.log(slug);\n            // console.log(\"\");\n            // console.log(postTitle)\n            console.log(\"slug=>\", slug)\n            resolve(slug);\n            // resolve(slug, postTitle)\n        })\n            .catch(err => {\n                console.log(err);\n                reject(err);\n            });\n    });\n}"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,kBAAnC;AACA,SAAQC,OAAR,EAAiBC,OAAjB,QAA+B,cAA/B;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,eAAf,CAA+BC,KAA/B,EAAsC;EACzC,MAAMC,IAAI,GAAG,MAAMC,aAAa,CAACF,KAAD,CAAhC;EAEA,MAAMG,MAAM,GAAGF,IAAI,CAACG,OAAL,IAAgB,EAA/B;EACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,MAA5B;EACA,OAAOA,MAAP;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeD,aAAf,CAA6BF,KAA7B,EAAoC;EACvC,MAAMO,QAAQ,GAAG,MAAMb,WAAW,EAAlC,CADuC,CAEvC;;EACA,MAAMc,OAAO,GAAGb,OAAO,CAACY,QAAD,CAAvB;;EACA,IAAI,CAACP,KAAD,IAAUQ,OAAd,EAAuB;IACnBH,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCE,OAAxC;IACA,OAAOA,OAAP;EACH,CAPsC,CASvC;;;EACA,MAAMP,IAAI,GAAG,MAAMR,OAAO,CAACc,QAAD,CAA1B;;EACA,IAAIN,IAAJ,EAAU;IACN,MAAML,OAAO,CAACW,QAAD,EAAWN,IAAX,CAAb;IACAI,OAAO,CAACI,IAAR,CAAa,wBAAb,EAAuCR,IAAvC;EACH;;EACD,OAAOA,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,gBAAT,CAA0BC,OAA1B,EAAmCC,IAAnC,EAAyC;EAC5C,MAAMC,SAAS,GAAGhB,YAAY,CAACc,OAAD,CAAZ,CAAsBE,SAAxC;EACA,MAAMC,MAAM,GAAGF,IAAI,CAACC,SAAD,CAAJ,IAAmB,EAAlC;EACA,OAAOC,MAAM,KAAK,EAAlB;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,SAAf,CAAyBC,CAAzB,EAA4B;EAC/B,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACpCC,KAAK,CAAC,wFAAwFJ,CAAzF,CAAL,CACKK,IADL,CACUC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADf,EACyBF,IADzB,CAC+BC,CAAD,IAAO;MACjC,IAAIE,GAAG,GAAGF,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV;MACAE,GAAG,GAAGA,GAAG,CAACC,UAAJ,CAAe,IAAf,EAAqB,EAArB,CAAN,CAFiC,CAGjC;MACA;;MACApB,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBkB,GAArB;MACA,MAAME,IAAI,GAAG5B,OAAO,CAAC0B,GAAD,CAApB,CANiC,CAOjC;MACA;MACA;MACA;;MACAnB,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBoB,IAAtB;MACAR,OAAO,CAACQ,IAAD,CAAP,CAZiC,CAajC;IACH,CAfD,EAgBKC,KAhBL,CAgBWC,GAAG,IAAI;MACVvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ;MACAT,MAAM,CAACS,GAAD,CAAN;IACH,CAnBL;EAoBH,CArBM,CAAP;AAsBH"},"metadata":{},"sourceType":"module"}