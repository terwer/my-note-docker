{
	"ID": "20221126213628-px4m4d0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16928396",
		"custom-desc": "主要使用了ed库加解密和验证代码commonjsandecmascriptmodules(esm)importasedfrom@nobleed_ifyoureusingsinglefileuseglobalvariableinstead_`windownobleed`constverifyed=asyncfunction(prikeypubkey){consolelog(prikey)consolelog(pubkey)====================新私钥开始==================",
		"custom-slug": "nodejs-using-ed25519-realize-encrypt-and-decrypt",
		"custom-vuepress-slug": "docs/002.前端开发/005.使用nodejs实现ed25519的公钥加密和私钥解密.md",
		"custom-wordpress-post-id": "4372",
		"icon": "1f632",
		"id": "20221126213628-px4m4d0",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221126213645-zf1i4xe\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20221126213648-5k4gd49\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20221126213645-zf1i4xe\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"tags": "ed25519,node,password,私钥,使用,实现,加密,解密",
		"title": "005.使用nodejs实现ed25519的公钥加密和私钥解密",
		"updated": "20221126213822"
	},
	"Children": [
		{
			"ID": "20221126213645-zf1i4xe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221126213645-zf1i4xe",
				"updated": "20221126213822"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要使用了 ed25519 库",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221126213647-josukmf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221126213647-josukmf",
				"updated": "20221126213647"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "加解密和验证代码",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221126213648-5k4gd49",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YXNjcmlwdA==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221126213648-5k4gd49",
				"updated": "20221126213648"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YXNjcmlwdA==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// Common.js and ECMAScript Modules (ESM)\nimport * as ed from '@noble/ed25519';\n// If you're using single file, use global variable instead: `window.nobleEd25519`\n\nconst verifyEd = async function (prikey, pubkey) {\n    console.log(\"你输入的私钥是：\" + prikey)\n    console.log(\"环境变量中的公钥是：\" + pubkey)\n\n    // ====================\n    // 新私钥开始\n    // ====================\n    // const newPrivateKey = ed.utils.randomPrivateKey();\n    // const privateKeyStr = Buffer.from(newPrivateKey).toString('base64');\n    // console.log(\"new privateKey=\u003e\", privateKeyStr)\n    // ====================\n    // 新私钥结束\n    // ====================\n  \n    const privateKeyStr = prikey\n\n    const privateKey = Buffer.from(privateKeyStr, 'base64');\n    // console.log(\"parsed privateKey=\u003e\", privateKey)\n\n    // ====================\n    // 新公钥开始\n    // ====================\n    // const newPublicKey = await ed.getPublicKey(privateKey);\n    // const publicKeyStr = Buffer.from(newPublicKey).toString('base64');\n    // console.log(\"new publicKey=\u003e\", publicKeyStr)\n    // ====================\n    // 新公钥结束\n    // ====================\n  \n    const publicKeyStr = pubkey\n\n    const publicKey = Buffer.from(publicKeyStr, 'base64');\n    // console.log(\"parsed publicKey=\u003e\", publicKey)\n\n    try {\n        const valiPass = \"123456\";\n        const message = Uint8Array.from(valiPass, x =\u003e x.charCodeAt(0))\n        // const messageStr = Buffer.from(message).toString('base64');\n        // console.log(\"校验密码：\", valiPass)\n\n        const signature = await ed.sign(message, privateKey);\n        const isValid = await ed.verify(signature, message, publicKey);\n        // console.log(\"验证结果：\", isValid ? \"有效\" : \"无效\")\n        return isValid;\n    } catch (e) {\n        console.warn(\"校验失败，请检查密码\", e)\n        return false;\n    }\n}\n\nconst privateKeyStr = \"prikey\";\nconst publicKeyStr = \"pubkey\"\nconst valiResult = verifyEd(privateKeyStr, publicKeyStr)\nvaliResult.then(function(item){\n    console.log(\"item=\u003e\", item)\n})\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		}
	]
}