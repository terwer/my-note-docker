{
	"ID": "20220829222648-rapz7on",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16637839",
		"custom-desc": "代码实现续核心执行引擎executor的实现执行器的实现@name_simpleexecutor@author_terwer@date__classsimpleexecutor_executor{@throws(exception__class)overridefunquery(configuration_configurationmappedstatement_mappedstatementvarargparams_any)_list{注册驱动获取链接valconnection=configuratio",
		"custom-jvue-post-id": "8008",
		"custom-kms-post-id": "182ea452d91797f9d78011a4b499872f",
		"custom-slug": "code-implementation-of-custom-persistence-layer-framework-2",
		"custom-vuepress-slug": "docs/001.后端开发/002.开源框架/001.MyBatis/123.自定义持久层框架的代码实现二.md",
		"custom-yuque-post-id": "91130023",
		"id": "20220829222648-rapz7on",
		"tags": "custom,dao,framework,persistence,mybatis,mybatis-4",
		"title": "123.自定义持久层框架的代码实现二",
		"updated": "20220829233830"
	},
	"Children": [
		{
			"ID": "20220829223039-n8k4ahl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220829223039-n8k4ahl",
				"updated": "20220829223513"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码实现续"
				}
			]
		},
		{
			"ID": "20220829223039-qj6m1r2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220829223039-qj6m1r2",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心执行引擎Executor的实现"
				}
			]
		},
		{
			"ID": "20220829223039-3f82bwq",
			"Type": "NodeHTMLBlock",
			"Data": "\u003ccode-group\u003e",
			"Properties": {
				"id": "20220829223039-3f82bwq",
				"updated": "20220829223039"
			}
		},
		{
			"ID": "20220829223039-69g29ht",
			"Type": "NodeHTMLBlock",
			"Data": "\u003ccode-block title=\"Kotlin\" active\u003e",
			"Properties": {
				"id": "20220829223039-69g29ht",
				"updated": "20220829223039"
			}
		},
		{
			"ID": "20220829223039-afl17ys",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220829223039-afl17ys",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "a290bGlu"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 执行器的实现\n *\n * @name: SimpleExecutor\n * @author: terwer\n * @date: 2022-05-08 16:53\n */\nclass SimpleExecutor : Executor {\n    @Throws(Exception::class)\n    override fun \u003cE\u003e query(\n        configuration: Configuration,\n        mappedStatement: MappedStatement,\n        vararg params: Any\n    ): List\u003cE\u003e {\n        // 注册驱动，获取链接\n        val connection = configuration.dataSource.connection\n\n        // 获取sql语句\n        // 获取的sql\n        // select * from user where id = #{id} and username = #{username}\n        // 转换后的sql\n        // select * from user where id = ? and username = ?\n        val sql = mappedStatement.sql\n\n        // 转换sql语句\n        val boundSql = getBoundSql(sql)\n\n        // 获取预处理对象\n        val preparedStatement = connection.prepareStatement(boundSql.sqlText)\n\n        // 设置参数\n        // 参数全路径\n        val parameterType = mappedStatement.parameterType\n        val parameterClass = getClassType(parameterType)\n        val parameterMappingList = boundSql.parameterMappingList\n        for (i in parameterMappingList.indices) {\n            val parameterMapping = parameterMappingList[i]\n            val content = parameterMapping.content\n            val field = parameterClass!!.getDeclaredField(content)\n            field.isAccessible = true\n            val value = field[params[0]]\n            preparedStatement.setObject(i + 1, value)\n        }\n\n        // 执行sql\n        val resultSet = preparedStatement.executeQuery()\n        val returnType = mappedStatement.resultType\n        val resultTypeClass = getClassType(returnType)\n        val objects = ArrayList\u003cAny\u003e()\n\n        // 封装返回结果集\n        while (resultSet.next()) {\n            val o = resultTypeClass!!.newInstance()\n            val metaData = resultSet.metaData\n            for (i in 1..metaData.columnCount) {\n                val columnName = metaData.getColumnName(i)\n                // 获取字段值\n                val value = resultSet.getObject(columnName)\n\n                // 使用反射或者内省，根据数据库表和实体的对应关系完成封装\n                val propertyDescriptor = PropertyDescriptor(columnName, resultTypeClass)\n                val writeMethod = propertyDescriptor.writeMethod\n                writeMethod.invoke(o, value)\n            }\n            objects.add(o)\n        }\n        return objects as List\u003cE\u003e\n    }\n\n    @Throws(ClassNotFoundException::class)\n    private fun getClassType(parameterType: String?): Class\u003c*\u003e? {\n        return if (parameterType != null) {\n            Class.forName(parameterType)\n        } else null\n    }\n\n    /**\n     * 1、将#{}使用?代替\n     * 2、解析出#{}的值进行存储\n     *\n     * @param sql\n     * @return\n     */\n    private fun getBoundSql(sql: String): BoundSql {\n        // 标记处理类，配合标记解析器完成对占位符的解析\n        val tokenHandler = ParameterMappingTokenHandler()\n        val genericTokenParser = GenericTokenParser(\"#{\", \"}\", tokenHandler)\n\n        // 解析后的sql\n        val parseSql = genericTokenParser.parse(sql)\n        // 解析的参数名称\n        val parameterMappings = tokenHandler.parameterMappings\n        return BoundSql(parseSql, parameterMappings)\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220829223039-zx0efi2",
			"Type": "NodeHTMLBlock",
			"Data": "\u003c/code-block\u003e",
			"Properties": {
				"id": "20220829223039-zx0efi2",
				"updated": "20220829223039"
			}
		},
		{
			"ID": "20220829223039-n5hzz94",
			"Type": "NodeHTMLBlock",
			"Data": "\u003ccode-block title=\"Java\"\u003e",
			"Properties": {
				"id": "20220829223039-n5hzz94",
				"updated": "20220829223039"
			}
		},
		{
			"ID": "20220829223039-4dbqx4i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220829223039-4dbqx4i",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 执行器的实现\n *\n * @name: SimpleExecutor\n * @author: terwer\n * @date: 2022-03-14 16:53\n **/\npublic class SimpleExecutor implements Executor {\n    @Override\n    public \u003cE\u003e List\u003cE\u003e query(Configuration configuration, MappedStatement mappedStatement, Object... params) throws Exception {\n        // 注册驱动，获取链接\n        Connection connection = configuration.getDataSource().getConnection();\n\n        // 获取sql语句\n        // 获取的sql\n        // select * from user where id = #{id} and username = #{username}\n        // 转换后的sql\n        // select * from user where id = ? and username = ?\n        String sql = mappedStatement.getSql();\n\n        // 转换sql语句\n        BoundSql boundSql = getBoundSql(sql);\n\n        // 获取预处理对象\n        PreparedStatement preparedStatement = connection.prepareStatement(boundSql.getSqlText());\n\n        // 设置参数\n        // 参数全路径\n        String parameterType = mappedStatement.getParameterType();\n        Class\u003c?\u003e parameterClass = getClassType(parameterType);\n\n        List\u003cParameterMapping\u003e parameterMappingList = boundSql.getParameterMappingList();\n        for (int i = 0; i \u003c parameterMappingList.size(); i++) {\n            ParameterMapping parameterMapping = parameterMappingList.get(i);\n            String content = parameterMapping.getContent();\n\n            Field field = parameterClass.getDeclaredField(content);\n            field.setAccessible(true);\n            Object value = field.get(params[0]);\n\n            preparedStatement.setObject(i + 1, value);\n        }\n\n        // 执行sql\n        ResultSet resultSet = preparedStatement.executeQuery();\n        String returnType = mappedStatement.getResultType();\n        Class\u003c?\u003e resultTypeClass = getClassType(returnType);\n        Object o = resultTypeClass.newInstance();\n        ArrayList\u003cObject\u003e objects = new ArrayList\u003c\u003e();\n\n        // 封装返回结果集\n        while (resultSet.next()) {\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            for (int i = 1; i \u003c= metaData.getColumnCount(); i++) {\n                String columnName = metaData.getColumnName(i);\n                // 获取字段值\n                Object value = resultSet.getObject(columnName);\n\n                // 使用反射或者内省，根据数据库表和实体的对应关系完成封装\n                PropertyDescriptor propertyDescriptor = new PropertyDescriptor(columnName, resultTypeClass);\n                Method writeMethod = propertyDescriptor.getWriteMethod();\n                writeMethod.invoke(o, value);\n            }\n            objects.add(o);\n        }\n\n        return (List\u003cE\u003e) objects;\n    }\n\n    private Class\u003c?\u003e getClassType(String parameterType) throws ClassNotFoundException {\n        if (parameterType != null) {\n            Class\u003c?\u003e aClass = Class.forName(parameterType);\n            return aClass;\n        }\n        return null;\n    }\n\n    /**\n     * 1、将#{}使用?代替\n     * 2、解析出#{}的值进行存储\n     *\n     * @param sql\n     * @return\n     */\n    private BoundSql getBoundSql(String sql) {\n        // 标记处理类，配合标记解析器完成对占位符的解析\n        ParameterMappingTokenHandler tokenHandler = new ParameterMappingTokenHandler();\n        GenericTokenParser genericTokenParser = new GenericTokenParser(\"#{\", \"}\", tokenHandler);\n\n        // 解析后的sql\n        String parseSql = genericTokenParser.parse(sql);\n        // 解析的参数名称\n        List\u003cParameterMapping\u003e parameterMappings = tokenHandler.getParameterMappings();\n\n        BoundSql boundSql = new BoundSql(parseSql, parameterMappings);\n\n        return boundSql;\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220829223039-pxs858n",
			"Type": "NodeHTMLBlock",
			"Data": "\u003c/code-block\u003e",
			"Properties": {
				"id": "20220829223039-pxs858n",
				"updated": "20220829223039"
			}
		},
		{
			"ID": "20220829223039-q7t66oc",
			"Type": "NodeHTMLBlock",
			"Data": "\u003c/code-group\u003e",
			"Properties": {
				"id": "20220829223039-q7t66oc",
				"updated": "20220829223039"
			}
		},
		{
			"ID": "20220829223039-2r5qyx9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829223039-2r5qyx9",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行效果"
				}
			]
		},
		{
			"ID": "20220829233826-qzvpkqg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829233826-qzvpkqg",
				"updated": "20220829233830"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/20220314184626.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220829223039-lugmgcm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220829223039-lugmgcm",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "问题修复"
				}
			]
		},
		{
			"ID": "20220829223039-mat27n8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829223039-mat27n8",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、selectList打印的全部是同一个值"
				}
			]
		},
		{
			"ID": "20220829223039-9qdh768",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220829223039-9qdh768",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/bin/java -... com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.terwergreen.test.IPersistenceTest,test2\nConnected to the target VM, address: '127.0.0.1:50317', transport: 'socket'\nlog4j:WARN No appenders could be found for logger (com.mchange.v2.log.MLog).\nlog4j:WARN Please initialize the log4j system properly.\nUser{id=5, username='dali'}\nUser{id=5, username='dali'}\nUser{id=5, username='dali'}\nUser{id=5, username='dali'}\nDisconnected from the target VM, address: '127.0.0.1:50317', transport: 'socket'\n\nProcess finished with exit code 0\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220829223039-d9vny8f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829223039-d9vny8f",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "修正方案"
				}
			]
		},
		{
			"ID": "20220829233555-v7p783g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829233555-v7p783g",
				"updated": "20220829233609"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/20220314190534.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20220829223039-8rw77i6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829223039-8rw77i6",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "修正后"
				}
			]
		},
		{
			"ID": "20220829223039-wajw0ga",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220829223039-wajw0ga",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/bin/java -... com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.terwergreen.test.IPersistenceTest,test2\nConnected to the target VM, address: '127.0.0.1:50820', transport: 'socket'\nlog4j:WARN No appenders could be found for logger (com.mchange.v2.log.MLog).\nlog4j:WARN Please initialize the log4j system properly.\nUser{id=1, username='tyw'}\nUser{id=2, username='张月'}\nUser{id=4, username='haha'}\nUser{id=5, username='dali'}\nDisconnected from the target VM, address: '127.0.0.1:50820', transport: 'socket'\n\nProcess finished with exit code 0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220829223039-xgoolv3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220829223039-xgoolv3",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码仓库"
				}
			]
		},
		{
			"ID": "20220829223039-qznr9et",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829223039-qznr9et",
				"updated": "20220829223039"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "custom-persistence"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://github.com/terwer/senior-java-engineer-road/tree/master/p7-skill/framework/mybatis/custom-persistence"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220829223444-u5o7sok",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220829223444-u5o7sok",
				"updated": "20220829223456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220829223039-grpyi9h",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220829223039-grpyi9h",
						"updated": "20220829223456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "文章更新历史"
						}
					]
				},
				{
					"ID": "20220829223039-hiz8c6a",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220829223039-hiz8c6a",
						"updated": "20220829223039"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "2022/05/08 feat:增加Kotlin实现。"
						}
					]
				}
			]
		},
		{
			"ID": "20220829223559-e6cbaiq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829223559-e6cbaiq"
			}
		}
	]
}