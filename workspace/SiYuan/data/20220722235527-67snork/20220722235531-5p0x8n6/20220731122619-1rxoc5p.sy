{
	"ID": "20220731122619-1rxoc5p",
	"Type": "NodeDocument",
	"Properties": {
		"custom-desc": "表单校验模板js代码import{reactiveref}fromvue_import{forminstanceformrules}fromelementplus_import{usein}fromvuein_const{t}=usein()constformsize=ref(default)constformref=ref()constformdata=ref({githubuser_})construles=reactive({githubuser_[{required_truemessage_()=",
		"custom-slug": "form-verification",
		"custom-vuepress-slug": "form-verification",
		"id": "20220731122619-1rxoc5p",
		"tags": "表单,校验,模板,代码,其中",
		"title": "表单校验",
		"updated": "20220731124238"
	},
	"Children": [
		{
			"ID": "20220731122935-58b2nn2",
			"Type": "NodeWidget",
			"Data": "\u003ciframe src=\"/widgets/sy-post-publisher\" data-src=\"/widgets/sy-post-publisher\" data-subtype=\"widget\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"\u003e\u003c/iframe\u003e",
			"Properties": {
				"id": "20220731122935-58b2nn2",
				"style": "text-align: left;",
				"updated": "20220731122935"
			}
		},
		{
			"ID": "20220731122619-1a1gw00",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220731122619-1a1gw00",
				"updated": "20220731122641"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220731122642-c7ov5tn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220731122642-c7ov5tn",
				"updated": "20220731124238"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "aHRtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003ctemplate\u003e\n  \u003cel-form label-width=\"120px\" ref=\"formRef\" :model=\"formData\" :rules=\"rules\" :size=\"formSize\" status-icon\u003e\n    \u003cel-form-item :label=\"$t('setting.blog.type.vuepress.github.user')\" prop=\"githubUser\"\u003e\n      \u003cel-input v-model=\"formData.githubUser\" :placeholder=\"$t('setting.blog.type.vuepress.github.user.tip')\"/\u003e\n    \u003c/el-form-item\u003e\n\n    \u003cel-form-item\u003e\n      \u003cel-button type=\"primary\" @click=\"submitForm(formRef)\"\u003e{{ $t('setting.blog.save') }}\u003c/el-button\u003e\n      \u003cel-button @click=\"resetForm(formRef)\"\u003e{{ $t('setting.blog.cancel') }}\u003c/el-button\u003e\n    \u003c/el-form-item\u003e\n  \u003c/el-form\u003e\n\u003c/template\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220731122646-tddiaug",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220731122646-tddiaug",
				"updated": "20220731122651"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "js 代码",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220731122651-y2i8nin",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220731122651-y2i8nin",
				"updated": "20220731124011"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "dHM="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cscript lang=\"ts\" setup\u003e\nimport {reactive, ref} from \"vue\";\nimport {FormInstance, FormRules} from \"element-plus\";\nimport {useI18n} from \"vue-i18n\";\n\nconst {t} = useI18n()\n\nconst formSize = ref('default')\nconst formRef = ref\u003cFormInstance\u003e()\nconst formData = ref({\n  githubUser: \"\"\n})\nconst rules = reactive\u003cFormRules\u003e({\n  githubUser: [\n    {\n      required: true,\n      message: () =\u003e t('form.validate.name.required')\n    }\n  ]\n})\n\nconst submitForm = async (formEl: FormInstance | undefined) =\u003e {\n  if (!formEl) return\n  const result = await formEl.validate((valid, fields) =\u003e {\n    if (valid) {\n      log.logInfo(\"校验成功\")\n    } else {\n      log.logError(t('main.opt.failure'), fields)\n      // ElMessage.error(t('main.opt.failure'))\n      return\n    }\n  })\n  if (!result) {\n    return\n  }\n}\nconst resetForm = (formEl: FormInstance | undefined) =\u003e {\n  if (!formEl) return\n  formEl.resetFields()\n}\n\u003c/script\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220731122828-tdf2l8c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220731122828-tdf2l8c",
				"updated": "20220731122923"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中，formData 使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "reactive"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 也可以。"
				}
			]
		}
	]
}