{
	"ID": "20220714122357-8a5oo0j",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220714122357-8a5oo0j",
		"title": "Golang包管理，go module模式、go mod和go sum等文件介绍",
		"updated": "20220714122915"
	},
	"Children": [
		{
			"ID": "20220714122413-e00uz2j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220714122413-e00uz2j",
				"updated": "20220714122413"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "Go 包管理详解",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122420-jxvg76b",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220714122420-jxvg76b",
				"updated": "20220714122420"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "包管理简介",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122409-vxbp19n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122409-vxbp19n",
				"updated": "20220714122420"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了解决 Golang 依赖问题，类似于 Rust 的 Cargo、Node.js 的 NPM、Python 的 Pip、Ruby 的 Boundler 等，Golang 最原始的依赖管理是 go get，执行命令后会拉取代码放入 GOPATH/src 下面，但是它是作为 GOPATH 下全局的依赖，并且 go get 还不能版本控制，以及隔离项目的包依赖。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122409-ckf0cj9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122409-ckf0cj9",
				"updated": "20220714122409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于以上这些问题，在 go mod 出现之前，有 dep，govendor 等包管理工具的出现，但都多多少少存在缺陷。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122409-uhgyqlk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122409-uhgyqlk",
				"updated": "20220714122409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从 Go 1.11 版本开始，官方已内置了更为强大的 Go modules 来一统多年来 Go 包依赖管理混乱的局面(Go 官方之前推出的 dep 工具也几乎胎死腹中)，并且将在 1.13 版本中正式默认开启，目前已受到社区的看好和强烈推荐，建议新项目采用 Go modules。作为新入局 go 的同学，可以跳过旧的包管理，直接了解和使用 go modules 机制（即 go mod 系列命令）来管理包。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122550-htdom40",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220714122550-htdom40",
				"updated": "20220714122550"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "GO111MODULE",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122547-9plt87h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122547-9plt87h",
				"updated": "20220714122550"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "golang 提供了一个环境变量“GO111MODULE”，默认值为 auto，如果当前目录里有 go.mod 文件，就使用 go modules，否则使用旧的 GOPATH 和 vendor 机制，因为在 modules 机制下 go get 只会下载 go modules。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122547-zp5r498",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122547-zp5r498",
				"updated": "20220714122547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "modules 和传统 GOPATH 不同，不需要包含 src，bin 这样的子目录，一个源代码目录甚至是空目录都可以作为 module，只要其中包含 go.mod 文件。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122547-n4b1k2n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122547-n4b1k2n",
				"updated": "20220714122711"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "除了 go.mod 之外，",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeStrong",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color1);"
					},
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeText",
							"Data": "go 命令还维护一个名为 go.sum 的文件，其中包含特定模块版本内容的预期加密哈希",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color1);\"}",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "，go 命令使用 go.sum 文件确保这些模块的未来下载检索与第一次下载相同的位，以确保项目所依赖的模块不会出现意外更改，无论是出于恶意、意外还是其他原因。 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeStrong",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color7);"
					},
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeText",
							"Data": "go.mod 和 go.sum 都应检入版本控制。",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color7);\"}",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122547-xrogkmi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122547-xrogkmi",
				"updated": "20220714122743"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color1);"
					},
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeText",
							"Data": "go.sum 不需要手工维护",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color1);\"}",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "，但是也可以了解一下，下面会进行介绍。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122715-dnir5p9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220714122715-dnir5p9",
				"updated": "20220714122829"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "参考",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220714122830-q2myvir",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122830-q2myvir",
				"updated": "20220714122912"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkText",
							"Data": "https://blog.csdn.net/weixin_43700106/article/details/118279983",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://blog.csdn.net/weixin_43700106/article/details/118279983",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				}
			]
		},
		{
			"ID": "20220714122915-uzxmj8b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220714122915-uzxmj8b",
				"updated": "20220714122915"
			}
		}
	]
}