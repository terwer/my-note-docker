{
	"ID": "20220906223315-z8o4zt1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16663636",
		"custom-conf-post-id": "11436036",
		"custom-desc": "在mybatis中一级缓存是默认开启的。在一个sqlsession中对user表进行两次根据id的查询查看发出sql语句的情况。根据id查询用户@paramid@return@select()userfinduserbyid(integerid)_@beforepublicvoidbefore()throwsexception{systemoutprintln(inputstreamresourceasstream=resourcesgetresourceasstream(sqlsessionfactor",
		"custom-kms-post-id": "1833ef991c0f1685125ba364bc896159",
		"custom-slug": "mybatis-s-first-level-cache-zzbwpu",
		"custom-vuepress-slug": "docs/001.后端开发/002.开源框架/001.MyBatis/420.MyBatis的一级缓存.md",
		"custom-wordpress-post-id": "4247",
		"custom-yuque-post-id": "93076809",
		"id": "20220906223315-z8o4zt1",
		"tags": "查询,缓存,mybatis,一级缓存",
		"title": "420.MyBatis的一级缓存",
		"updated": "20220916211057"
	},
	"Children": [
		{
			"ID": "20220906223315-xpd8sj0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220906223315-xpd8sj0",
				"updated": "20220906223337"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 MyBatis 中，一级缓存是默认开启的。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224133-kfi8dj8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220912224133-kfi8dj8",
				"updated": "20220912224144"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过场景来理解：",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224144-dksdo09",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220912224144-dksdo09",
				"updated": "20220912224147"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "场景一",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220906223337-ov94via",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220906223337-ov94via",
				"updated": "20220906223542"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、在一个 SqlSession 中，对 User 表进行两次根据 ID 的查询，查看发出 sql 语句的情况。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220906223542-lwxw4gd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220906223542-lwxw4gd",
				"updated": "20220906224233"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/**\n * 根据ID查询用户\n *\n * @param id\n * @return\n */\n@Select(\"select * from user where id=#{id}\")\nUser findUserById(Integer id);\n\n@Before\npublic void before() throws Exception {\n    System.out.println(\"before...\");\n    InputStream resourceAsStream = Resources.getResourceAsStream(\"sqlMapConfig.xml\");\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);\n    //根据 sqlSessionFactory 产生 session\n    sqlSession = sqlSessionFactory.openSession();\n    // 这样也是可以的，这样的话后面就不用每次都设置了\n    // sqlSession = sqlSessionFactory.openSession(true);\n    userMapper = sqlSession.getMapper(IUserMapper.class);\n}\n\n@Test\npublic void testFindUserById() {\n    //第一次查询，发出sql语句，并将查询出来的结果放进缓存中\n    User user = userMapper.findUserById(1);\n    System.out.println(user);\n\n    //第二次查询，由于是同一个sqlSession,会在缓存中查询结果 //如果有，则直接从缓存中取出来，不和数据库进行交互\n    User user2 = userMapper.findUserById(1);\n    System.out.println(user2);\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220906223955-yirl9oj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220906223955-yirl9oj",
				"updated": "20220906224006"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "sql 执行过程如下：",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220906224006-h0fj12e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220906224006-h0fj12e",
				"updated": "20220906224021"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@1677d1]\n==\u003e  Preparing: select * from user where id=?\n==\u003e Parameters: 1(Integer)\n\u003c==    Columns: id, username, password, birthday\n\u003c==        Row: 1, lucy, 123, 2019-12-12\n\u003c==      Total: 1\nUser{id=1, username='lucy', orderList=null, roleList=null}\nUser{id=1, username='lucy', orderList=null, roleList=null}\n\nProcess finished with exit code 0\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220906224434-6pgwa1w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220906224434-6pgwa1w",
				"style": "text-align: left;",
				"updated": "20220906224634"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20220906224622.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224152-jugcqeh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220912224152-jugcqeh",
				"updated": "20220912224157"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "场景二",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220906224716-j4rq7qq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220906224716-j4rq7qq",
				"updated": "20220912223116"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、同样对 user 表进行两次查询，不同的是两次查询之间进行了一次 update 操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912223621-2sve0wd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220912223621-2sve0wd",
				"updated": "20220912223950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Test\npublic void testFindUserById2() {\n    // 第一次查询\n    User user = userMapper.findUserById(1);\n    System.out.println(user);\n\n    // 更新操作\n    user.setUsername(\"tyw\");\n    userMapper.update(user);\n\n    // 第二次查询\n    User user2 = userMapper.findUserById(1);\n    System.out.println(user2);\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912223952-pdd0821",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220912223952-pdd0821",
				"updated": "20220912224032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到，第一次查询后，进行了更新，然后进行第二次查询，这里两次查询都输出了 sql，说明缓存没有生效。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224033-6o033sa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220912224033-6o033sa",
				"updated": "20220912224101"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@48fa0f47]\n==\u003e  Preparing: select * from user where id=?\n==\u003e Parameters: 1(Integer)\n\u003c==    Columns: id, username, password, birthday\n\u003c==        Row: 1, lucy, 123, 2019-12-12\n\u003c==      Total: 1\nUser{id=1, username='lucy', orderList=null, roleList=null}\n==\u003e  Preparing: update user set username=? where id=?\n==\u003e Parameters: tyw(String), 1(Integer)\n\u003c==    Updates: 1\n==\u003e  Preparing: select * from user where id=?\n==\u003e Parameters: 1(Integer)\n\u003c==    Columns: id, username, password, birthday\n\u003c==        Row: 1, tyw, 123, 2019-12-12\n\u003c==      Total: 1\nUser{id=1, username='tyw', orderList=null, roleList=null}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224103-3pepz8o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220912224103-3pepz8o",
				"updated": "20220912224204"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "总结",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224204-jdw1dlb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220912224204-jdw1dlb",
				"updated": "20220912224410"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、第一次查询用户 ID 为 1 的用户信息，先去缓存查找有没有 ID 为 1 的用户信息，如果没有，从数据库查询用户信息。得到用户信息，将数据保存到一级缓存中。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224411-tuah36f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220912224411-tuah36f",
				"updated": "20220912224546"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、如果 SqlSession 执行了 commit 操作（执行插入、更新、删除），则会情况 SqlSession 的一级缓存。这样做的目的是保存一级缓存中额数据是最新数据，防止脏读。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224546-1s9q90y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220912224546-1s9q90y",
				"updated": "20220912224718"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、第二次发起查询 ID 为 1 的用户信息，先去缓存中查询 ID 为 1 的用户信息，如果有，直接返回。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220912224718-7u0k1yt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220912224718-7u0k1yt",
				"updated": "20220912224743"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20220912224732.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220913193710-6266zhs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913193710-6266zhs",
				"updated": "20220915210107"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "一级缓存查找过程",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915210108-amgsa37",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915210108-amgsa37",
				"updated": "20220915214038"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20220915214014.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915214451-xwejzgt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915214451-xwejzgt",
				"updated": "20220915214532"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "一级缓存原理探究与源码分析",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915214459-smyfr96",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220915214459-smyfr96",
				"updated": "20220915215426"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "问题抛出",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215348-ffxdsfm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215348-ffxdsfm",
				"updated": "20220915215422"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一级缓存是什么？一级缓存什么时候被创建？一级缓存的工作流程是什么？",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215422-6nmik6o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215422-6nmik6o",
				"updated": "20220915215527"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SqlSession 中与缓存相关的属性和方法",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215748-0lyj1yq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215748-0lyj1yq",
				"updated": "20220915215748"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20220915215652.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215352-ldalvip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215352-ldalvip",
				"updated": "20220915220049"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "跟踪一下 clearCache 的子类和父类",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915220049-dfytan3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhbnR1bWw=",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915220049-dfytan3",
				"style": "text-align: left;",
				"updated": "20220915221708"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhbnR1bWw=",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@startuml\n\n!include https://unpkg.com/plantuml-style-c4@latest/core.puml\n' uncomment the following line and comment the first to use locally\n'!include core.puml\n\n'!theme plain\ntop to bottom direction\nskinparam linetype ortho\n\nclass BaseExecutor\nclass DefaultSqlSession\nclass PerpetualCache\ninterface SqlSession \u0026lt;\u0026lt; interface \u0026gt;\u0026gt;\n\nBaseExecutor       -[#595959,dashed]-\u0026gt;  PerpetualCache    : \u0026quot;«create»\u0026quot;\nBaseExecutor      \u0026quot;1\u0026quot; *-[#595959,plain]-\u0026gt; \u0026quot;localCache\\n1\u0026quot; PerpetualCache  \nDefaultSqlSession  -[#008200,dashed]-^  SqlSession    \n@enduml\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215352-rvxnram",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215352-rvxnram",
				"updated": "20220915221233"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简单来看",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915221234-e8k0hl3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915221234-e8k0hl3",
				"updated": "20220915222334"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20220915221237.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "可以看到，cache 的最底层其实就是一个 HashMap",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915222335-hx7oku4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915222335-hx7oku4",
				"updated": "20220915222351"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class PerpetualCache implements Cache {\n\n  private final String id;\n\n  private final Map\u003cObject, Object\u003e cache = new HashMap\u003c\u003e();\n\n  ...\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215352-s11i0og",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215352-s11i0og",
				"updated": "20220915222518"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓存其实就是本地存放的一个 Map 对象，每一个 SqlSession 都会存放一个 map 对象的引用。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915222531-wupnian",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220915222531-wupnian",
				"updated": "20220915225638"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "cache 的创建时机"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220915222541-kln6zh1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915222541-kln6zh1",
				"updated": "20220915222750"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Executor 是执行器，用来执行 SQL 请求，而且清除缓存的方法也在 Executor 中执行，所以很可能缓存的创建也很 有可能在 Executor 中。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915222744-2a5eg25",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915222744-2a5eg25",
				"updated": "20220915222803"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Executor 中有一个 createCacheKey 方法，这个方法很像是创建缓存的方法，跟进去看看，发现 createCacheKey 方法是由 BaseExecutor 执行的，代码如下",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215353-ikajtas",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915215353-ikajtas",
				"updated": "20220915223035"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Override\npublic CacheKey createCacheKey(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {\n    if (closed) {\n        throw new ExecutorException(\"Executor was closed.\");\n    }\n    CacheKey cacheKey = new CacheKey();\n    cacheKey.update(ms.getId());\n    cacheKey.update(rowBounds.getOffset());\n    cacheKey.update(rowBounds.getLimit());\n    cacheKey.update(boundSql.getSql());\n    List\u003cParameterMapping\u003e parameterMappings = boundSql.getParameterMappings();\n    TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();\n    // mimic DefaultParameterHandler logic\n    for (ParameterMapping parameterMapping : parameterMappings) {\n        if (parameterMapping.getMode() != ParameterMode.OUT) {\n            Object value;\n            String propertyName = parameterMapping.getProperty();\n            if (boundSql.hasAdditionalParameter(propertyName)) {\n                value = boundSql.getAdditionalParameter(propertyName);\n            } else if (parameterObject == null) {\n                value = null;\n            } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n                value = parameterObject;\n            } else {\n                MetaObject metaObject = configuration.newMetaObject(parameterObject);\n                value = metaObject.getValue(propertyName);\n            }\n            cacheKey.update(value);\n        }\n    }\n    if (configuration.getEnvironment() != null) {\n        // issue #176\n        cacheKey.update(configuration.getEnvironment().getId());\n    }\n    return cacheKey;\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215353-8p3hfoe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215353-8p3hfoe",
				"updated": "20220915223318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建缓存 key 会经过一系列的 update 方法，update 方法由一个 CacheKey 这个对象来执行的，这个 update 方法最终由 updateList 的 list 来把五个值存进去。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215353-n5ddd4l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915215353-n5ddd4l",
				"updated": "20220915223400"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void update(Object object) {\n    int baseHashCode = object == null ? 1 : ArrayUtil.hashCode(object);\n\n    count++;\n    checksum += baseHashCode;\n    baseHashCode *= count;\n\n    hashcode = multiplier * hashcode + baseHashCode;\n\n    updateList.add(object);\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915224414-3zvjx2t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915224414-3zvjx2t",
				"updated": "20220915224416"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20220915224358.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215353-urcm37u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215353-urcm37u",
				"updated": "20220915224224"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里需要注意一下最后一个值，",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "configuration.getEnvironmen().getId()",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 这是什么，这其实就是定义在 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeSpan",
					"CodeMarkerLen": 1,
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker",
							"Data": "`",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "sqlMapConfig.xml",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCodeSpanCloseMarker",
							"Data": "`",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 中的标签，⻅如下。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215357-dujla48",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915215357-dujla48",
				"updated": "20220915224051"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!-- environments：运行环境 --\u003e\n\u003cenvironments default=\"development\"\u003e\n    \u003cenvironment id=\"development\"\u003e\n        \u003c!-- 当前事务交给JDBC管理 --\u003e\n        \u003ctransactionManager type=\"JDBC\"/\u003e\n        \u003c!-- 当前使用MyBatis提供的连接池 --\u003e\n        \u003cdataSource type=\"POOLED\"\u003e\n            \u003cproperty name=\"driver\" value=\"${jdbc.driver}\"/\u003e\n            \u003cproperty name=\"url\" value=\"${jdbc.url}\"/\u003e\n            \u003cproperty name=\"username\" value=\"${jdbc.username}\"/\u003e\n            \u003cproperty name=\"password\" value=\"${jdbc.password}\"/\u003e\n        \u003c/dataSource\u003e\n    \u003c/environment\u003e\n    \u003cenvironment id=\"production\"\u003e\n        \u003ctransactionManager type=\"JDBC\"/\u003e\n        \u003cdataSource type=\"POOLED\"\u003e\n            \u003cproperty name=\"driver\" value=\"${jdbc.driver}\"/\u003e\n            \u003cproperty name=\"url\" value=\"${jdbc.url}\"/\u003e\n            \u003cproperty name=\"username\" value=\"${jdbc.username}\"/\u003e\n            \u003cproperty name=\"password\" value=\"${jdbc.password}\"/\u003e\n        \u003c/dataSource\u003e\n    \u003c/environment\u003e\n\u003c/environments\u003e\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215357-69bp48k",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220915215357-69bp48k",
				"updated": "20220915225648"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "一级缓存的使用"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220915224620-85l9rn9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915224620-85l9rn9",
				"updated": "20220915225408"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color1);"
					},
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeText",
							"Data": "一级缓存更多是用于查询操作，毕竟一级缓存也叫做查询缓存。",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color1);\"}",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215357-4yif5bc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915215357-4yif5bc",
				"updated": "20220915224948"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Override\npublic \u003cE\u003e List\u003cE\u003e query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    BoundSql boundSql = ms.getBoundSql(parameter);\n    CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);\n    return query(ms, parameter, rowBounds, resultHandler, key, boundSql);\n}\n\n@SuppressWarnings(\"unchecked\")\n@Override\npublic \u003cE\u003e List\u003cE\u003e query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    ErrorContext.instance().resource(ms.getResource()).activity(\"executing a query\").object(ms.getId());\n    if (closed) {\n        throw new ExecutorException(\"Executor was closed.\");\n    }\n    if (queryStack == 0 \u0026\u0026 ms.isFlushCacheRequired()) {\n        clearLocalCache();\n    }\n    List\u003cE\u003e list;\n    try {\n        queryStack++;\n        list = resultHandler == null ? (List\u003cE\u003e) localCache.getObject(key) : null;\n        if (list != null) {\n\t    // 处理存储过程\n            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n        } else {\n            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n        }\n    } finally {\n        queryStack--;\n    }\n    if (queryStack == 0) {\n        for (BaseExecutor.DeferredLoad deferredLoad : deferredLoads) {\n            deferredLoad.load();\n        }\n        // issue #601\n        deferredLoads.clear();\n        if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n            // issue #482\n            clearLocalCache();\n        }\n    }\n    return list;\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215357-zxirviq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215357-zxirviq",
				"updated": "20220915225001"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "queryFromDatabase 方法",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915225001-myz280h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915225001-myz280h",
				"updated": "20220915225030"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "private \u003cE\u003e List\u003cE\u003e queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    List\u003cE\u003e list;\n    localCache.putObject(key, EXECUTION_PLACEHOLDER);\n    try {\n        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n    } finally {\n        localCache.removeObject(key);\n    }\n    localCache.putObject(key, list);\n    if (ms.getStatementType() == StatementType.CALLABLE) {\n        localOutputParameterCache.putObject(key, parameter);\n    }\n    return list;\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215358-u25vpo5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915215358-u25vpo5",
				"updated": "20220915225454"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果查不到的话，就从数据库查，在 queryFromDatabase 中，会对 localcache 进行写入。 localcache 对象的 putObject 方法调用 PerpetualCache 类 的 put 方法，最终交给 Map 进行存放。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220915215358-wd9jl9a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20220915215358-wd9jl9a",
				"updated": "20220915225147"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Override\npublic void putObject(Object key, Object value) {\n    cache.put(key, value);\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20220916211057-qsy5ohi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220916211057-qsy5ohi"
			}
		}
	]
}