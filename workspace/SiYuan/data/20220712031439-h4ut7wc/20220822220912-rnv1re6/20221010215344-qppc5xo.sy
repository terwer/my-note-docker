{
	"ID": "20221010215344-qppc5xo",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16798372",
		"custom-desc": "如果一个类包含了属性与方法那么该类的每一个对象都具有自己的属性但无论一个类有多少个对象这些对象共享同一个方法。关于方法参数传递的总结_对于java中的方法参数传递无论传递的是原生数据类型还是引用类型统一是传值（passbyvalue​）。什么类型的引用就能指向什么类型的对象比如people类型的引用就能指向people类型的对象但不能指向student类型的对象。比如_valpeople=people()正确valpeople=student()错误peoplepeople=newpeople()_正确p",
		"custom-slug": "java-object-oriented-encapsulation-continued-two",
		"custom-vuepress-slug": "docs/001.后端开发/001.JavaSE/011.Java_SE_第十一讲_面向对象之封装续二.md",
		"custom-wordpress-post-id": "4301",
		"custom-yuque-post-id": "96955130_terwer/note",
		"id": "20221010215344-qppc5xo",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20221010215349-5f08vcf\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20221010215540-ygzy5fz\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:315,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20221010215612-pscrgnx\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:0,\u0026amp;quot;focusEnd\u0026amp;quot;:0}",
		"tags": "构造方法,对象,参数,类型,一个,面向对象,oop,object",
		"title": "011.Java_SE_第十一讲：面向对象之封装续二",
		"type": "doc",
		"updated": "20221010215612"
	},
	"Children": [
		{
			"ID": "20221010215349-5f08vcf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20221010215349-5f08vcf",
				"updated": "20221010215612"
			},
			"Children": [
				{
					"ID": "20221010215350-edo7zsv",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20221010215350-edo7zsv",
						"updated": "20221010215504"
					},
					"Children": [
						{
							"ID": "20221010215351-9obq5dk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215351-9obq5dk",
								"updated": "20221010215504"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果一个类包含了属性与方法，那么该类的每一个对象都具有自己的属性，但无论一个类有多少个对象，这些对象共享同一个方法。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010215352-4r18k65",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20221010215352-4r18k65",
						"updated": "20221010215507"
					},
					"Children": [
						{
							"ID": "20221010215353-37rot0z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215353-37rot0z",
								"updated": "20221010215507"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关于方法参数传递的总结：对于 Java 中的方法参数传递，无论传递的是原生数据类型还是引用类型，统一是传值（",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "pass by value"
								},
								{
									"Type": "NodeText",
									"Data": "​）。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010215354-1s6qyir",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20221010215354-1s6qyir",
						"updated": "20221010215508"
					},
					"Children": [
						{
							"ID": "20221010215355-xlkctpe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215355-xlkctpe",
								"updated": "20221010215508"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "什么类型的引用就能指向什么类型的对象，比如 People 类型的引用就能指向 People 类型的对象，但不能指向 Student 类型的对象。比如：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215356-zbws8ij",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "a290bGlu",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221010215356-zbws8ij",
								"updated": "20221010215356"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "a290bGlu",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "val people = People() // 正确\nval people = Student() //错误\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215359-14xc3o6",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221010215359-14xc3o6",
								"updated": "20221010215359"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "People people = new People(); // 正确\nPeople people = new Student(); //错误\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010215360-iz0hpra",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20221010215360-iz0hpra",
						"updated": "20221010215612"
					},
					"Children": [
						{
							"ID": "20221010215361-rxtae8c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215361-rxtae8c",
								"updated": "20221010215361"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法（"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Constructor"
								},
								{
									"Type": "NodeText",
									"Data": "​）：构造方法用于完成对象属性的初始化工作，构造方法的特点：\n"
								}
							]
						},
						{
							"ID": "20221010215612-pscrgnx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215612-pscrgnx"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "a) 构造方法的名字必须与类名完全一致（包含大小写）"
								}
							]
						},
						{
							"ID": "20221010215362-wd0hdi6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215362-wd0hdi6",
								"updated": "20221010215362"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "b) 构造方法没有返回值，连 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "void"
								},
								{
									"Type": "NodeText",
									"Data": " 也不能出现。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215363-peqgv5e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215363-peqgv5e",
								"updated": "20221010215517"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "c) 如果在定义一个类的时候，没有为类声明构造方法，那么 Java 编译器会自动为类添加一个没有参数且方法体为空的构造方法（默认的构造方法）",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215364-t03uwxr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215364-t03uwxr",
								"updated": "20221010215519"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "d) 如果在定义一个类的时候，为类声明了构造方法，那么 Java 编译器就不会再为类添加构造方法了。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215365-u9bdn9l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215365-u9bdn9l",
								"updated": "20221010215365"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "e) 不能显式调用类的构造方法，构造方法通常是通过 new 关键字隐式调用。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010215366-sqei09u",
					"Type": "NodeListItem",
					"Data": "5",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 5,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NQ==",
						"Num": 5
					},
					"Properties": {
						"id": "20221010215366-sqei09u",
						"updated": "20221010215366"
					},
					"Children": [
						{
							"ID": "20221010215367-y5n2hok",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215367-y5n2hok",
								"updated": "20221010215367"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "new 关键字在生成对象时完成了三件事情：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215368-4i26vgf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215368-4i26vgf",
								"updated": "20221010215368"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "a) 为对象开辟内存空间。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215369-4piioq7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215369-4piioq7",
								"updated": "20221010215369"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "b) 调用类的构造方法。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010215370-rqn00pa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215370-rqn00pa",
								"updated": "20221010215370"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "c) 将生成的对象的地址返回。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010215371-ea9s3nq",
					"Type": "NodeListItem",
					"Data": "6",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 6,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Ng==",
						"Num": 6
					},
					"Properties": {
						"id": "20221010215371-ea9s3nq",
						"updated": "20221010215371"
					},
					"Children": [
						{
							"ID": "20221010215372-degl6nr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215372-degl6nr",
								"updated": "20221010215372"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "默认的构造方法：构造方法没有参数且方法体为空。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010215373-bflpyxr",
					"Type": "NodeListItem",
					"Data": "7",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 7,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Nw==",
						"Num": 7
					},
					"Properties": {
						"id": "20221010215373-bflpyxr",
						"updated": "20221010215528"
					},
					"Children": [
						{
							"ID": "20221010215374-hv39ubd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010215374-hv39ubd",
								"updated": "20221010215528"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "new"
								},
								{
									"Type": "NodeText",
									"Data": "​ 来生成对象的时候，后面的小括号()表示构造方法的参数列表，如果构造方法不接收参数，那么小括号中的内容为空；如果构造方法接收参数，那么小括号中的实际参数就需要与构造方法定义中的形式参数保持一致（参数数量一致、参数类型一致、按照顺序逐一赋值）。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221010215540-ygzy5fz",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221010215540-ygzy5fz",
				"style": "color: var(--b3-card-success-color); background-color: var(--b3-card-success-background);",
				"updated": "20221010215347"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e ",
					"Properties": {
						"id": ""
					}
				},
				{
					"ID": "20221010215345-812llbr",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221010215345-812llbr",
						"updated": "20221010215546"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "文章更新历史",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"ID": "20221010215346-xijm3e2",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221010215346-xijm3e2",
						"updated": "20221010215346"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "2022/05/08 feat:新增 Kotlin 语法支持。",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"ID": "20221010215347-87c9nl2",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221010215347-87c9nl2",
						"updated": "20221010215347"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "2022/05/08 fix:修改备注。",
							"Properties": {
								"id": ""
							}
						}
					]
				}
			]
		}
	]
}