{
	"ID": "20221021222848-vlyagor",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16815193",
		"custom-desc": "基本方法使用由tostring()​方法提供的默认的转换显示类集的内容tostring()​方法是从abstractcollection()​继承下来的。对于例子来说足够但是通常情况下会重写此方法。publicclassarraylisttest{publicstaticvoidmain(string[]args){arraylistarraylist=newarraylist()_arraylistadd(arraylistadd(arraylistadd(arraylistadd(​strings=(",
		"custom-slug": "arraylist-in-depth-analysis-z18oerm",
		"custom-vuepress-slug": "docs/001.后端开发/001.JavaSE/022.ArrayList深入分析.md",
		"custom-wordpress-post-id": "4326",
		"custom-yuque-post-id": "97542732_terwer/note",
		"id": "20221021222848-vlyagor",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221023232622-4xs4dn7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20221023232632-jsizakq\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20221023232632-jsizakq\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0}",
		"tags": "结果,包装,操作,转换,基本,arraylist,deep,analysis",
		"title": "022.ArrayList深入分析",
		"updated": "20221023235237"
	},
	"Children": [
		{
			"ID": "20221023232756-jc1diod",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023232756-jc1diod",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "基本方法",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232819-8ld2svz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232819-8ld2svz",
				"updated": "20221023233039"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用由 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "toString()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法提供的默认的转换显示类集的内容，",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "toString()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法是从 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "AbstractCollection()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 继承下来的。对于例子来说足够，但是通常情况下会重写此方法。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-zo4gb8w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-zo4gb8w",
				"updated": "20221023232808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " public class ArrayListTest1 {\n   public static void main(String[] args) {\n     ArrayList arrayList = new ArrayList();\n     arrayList.add(\"hello\");\n     arrayList.add(\"world\");\n     arrayList.add(\"world\");\n     arrayList.add(\"welcome\");\n ​\n     String s1 = (String) arrayList.get(0);\n     String s2 = (String) arrayList.get(1);\n     String s3 = (String) arrayList.get(2);\n     String s4 = (String) arrayList.get(3);\n ​\n     System.out.println(s1);\n     System.out.println(s2);\n     System.out.println(s3);\n     System.out.println(s4);\n ​\n     System.out.println(\"-------------\");\n     for (int i = 0; i \u003c arrayList.size(); i++) {\n       System.out.println(arrayList.get(i));\n     }\n ​\n     // arrayList.clear();\n     // System.out.println(arrayList.size());\n     // System.out.println(arrayList.isEmpty());\n ​\n     arrayList.remove(0);\n ​\n     System.out.println(\"-------------\");\n     for (int i = 0; i \u003c arrayList.size(); i++) {\n       System.out.println(arrayList.get(i));\n     }\n ​\n     arrayList.remove(\"welcome\");\n     System.out.println(\"-------------\");\n     for (int i = 0; i \u003c arrayList.size(); i++) {\n       System.out.println(arrayList.get(i));\n     }\n ​\n     System.out.println(\"-----------------\");\n ​\n     arrayList.add(\"aaa\");\n     arrayList.add(\"bbb\");\n ​\n     System.out.println(arrayList.indexOf(\"world\"));\n     System.out.println(arrayList.lastIndexOf(\"world\"));\n     System.out.println(arrayList.indexOf(\"aaa\"));\n   }\n }\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-fyihqbw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-fyihqbw",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "结果"
				}
			]
		},
		{
			"ID": "20221023232756-xdqn059",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-xdqn059",
				"updated": "20221023234756"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " hello\n world\n world\n welcome\n -------------\n hello\n world\n world\n welcome\n -------------\n world\n world\n welcome\n -------------\n world\n world\n -----------------\n 0\n 1\n 2\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-toulw18",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023232756-toulw18",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "包装类与原生数据类型测试",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-c8mglrh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-c8mglrh",
				"updated": "20221023234802"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " public class ArrayListTest2 {\n   public static void main(String[] args) {\n     ArrayList list = new ArrayList();\n     list.add(\"hello\");\n     list.add(new Integer(2));\n   \n     String str = (String)list.get(0);\n     Integer in = (Integer)list.get(1);\n     // String str2 = (String)list.get(1);\n   \n     System.out.println(str);\n     System.out.println(in.intValue());\n     // System.err.println(str2);\n   }\n ​\n }\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-v81kvzq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-v81kvzq",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "结果"
				}
			]
		},
		{
			"ID": "20221023232756-ii7ezw6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-ii7ezw6",
				"updated": "20221023234807"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " hello\n 2\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-4u7whkc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023232756-4u7whkc",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "包装类型的遍历与操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-gocphfs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-gocphfs",
				"updated": "20221023234817"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " public class ArrayListTest3 {\n ​\n   public static void main(String[] args) {\n     ArrayList list = new ArrayList();\n ​\n     list.add(new Integer(3));\n     list.add(new Integer(4));\n     list.add(new Integer(5));\n     list.add(new Integer(6));\n ​\n     int sum = 0;\n     for (int i = 0; i \u003c list.size(); i++) {\n       Integer item = (Integer) list.get(i);\n       sum += item.intValue();\n     }\n ​\n     System.out.println(sum);\n   }\n }\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-bzs7z5n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-bzs7z5n",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "结果"
				}
			]
		},
		{
			"ID": "20221023232756-ktimmd3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-ktimmd3",
				"updated": "20221023234821"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " 18\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023234227-jp3smcg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023234227-jp3smcg",
				"updated": "20221023234313"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "从数组列表（ArrayList）获得数组（Array）",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023234315-5w3n735",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20221023234315-5w3n735",
				"updated": "20221023234321"
			},
			"Children": [
				{
					"ID": "20221023234321-9uvs9xy",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221023234321-9uvs9xy",
						"updated": "20221023234321"
					},
					"Children": [
						{
							"ID": "20221023234321-rd09jde",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023234321-rd09jde",
								"updated": "20221023234414"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当使用 ArrayList 时，有事想要获得一个实际的数组，这个数组包含了列表的内容。可以通过调用 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "toArray()"
								},
								{
									"Type": "NodeText",
									"Data": "​ 来实现它。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023234418-rl5zuqu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023234418-rl5zuqu",
								"updated": "20221023234456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下面是几个为什么可能想讲类集转换成为数组的原因：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023234457-rapikfr",
							"Type": "NodeList",
							"ListData": {
								"Tight": true,
								"BulletChar": 42,
								"Padding": 2,
								"Marker": "Kg==",
								"Num": -1
							},
							"Properties": {
								"id": "20221023234457-rapikfr",
								"updated": "20221023234459"
							},
							"Children": [
								{
									"ID": "20221023234459-mbl3l2t",
									"Type": "NodeListItem",
									"Data": "*",
									"ListData": {
										"Tight": true,
										"BulletChar": 42,
										"Padding": 2,
										"Marker": "Kg==",
										"Num": -1
									},
									"Properties": {
										"id": "20221023234459-mbl3l2t",
										"updated": "20221023234459"
									},
									"Children": [
										{
											"ID": "20221023234459-dsqx5uz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221023234459-dsqx5uz",
												"updated": "20221023234531"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "对于特定的操作，可以获得更快的处理时间",
													"Properties": {
														"id": ""
													}
												}
											]
										}
									]
								},
								{
									"ID": "20221023234531-6cv2sy4",
									"Type": "NodeListItem",
									"Data": "*",
									"ListData": {
										"Tight": true,
										"BulletChar": 42,
										"Padding": 2,
										"Marker": "Kg==",
										"Num": -1
									},
									"Properties": {
										"id": "20221023234531-6cv2sy4",
										"updated": "20221023234531"
									},
									"Children": [
										{
											"ID": "20221023234531-5cg7lnm",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221023234531-5cg7lnm",
												"updated": "20221023234619"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "为了给方法传递数组，而方法不必重载去接收类集",
													"Properties": {
														"id": ""
													}
												}
											]
										}
									]
								},
								{
									"ID": "20221023234622-g2g6ggt",
									"Type": "NodeListItem",
									"Data": "*",
									"ListData": {
										"Tight": true,
										"BulletChar": 42,
										"Padding": 2,
										"Marker": "Kg==",
										"Num": -1
									},
									"Properties": {
										"id": "20221023234622-g2g6ggt",
										"updated": "20221023234622"
									},
									"Children": [
										{
											"ID": "20221023234622-xfqqsba",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221023234622-xfqqsba",
												"updated": "20221023234658"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "为了将新的基于类集的程序与不认识类集的老程序集成",
													"Properties": {
														"id": ""
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221023235022-srw025t",
			"Type": "NodeList",
			"ListData": {
				"BulletChar": 42,
				"Padding": 2,
				"Marker": "Kg==",
				"Num": -1
			},
			"Properties": {
				"id": "20221023235022-srw025t",
				"updated": "20221023235237"
			},
			"Children": [
				{
					"ID": "20221023235026-5mcz50b",
					"Type": "NodeListItem",
					"Data": "*",
					"ListData": {
						"BulletChar": 42,
						"Padding": 2,
						"Marker": "Kg==",
						"Num": -1
					},
					"Properties": {
						"id": "20221023235026-5mcz50b",
						"updated": "20221023235237"
					},
					"Children": [
						{
							"ID": "20221023235026-3s220d1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023235026-3s220d1",
								"updated": "20221023235038"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "Arrays.asList()"
								},
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023235040-ys924jt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023235040-ys924jt",
								"updated": "20221023235237"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回一个受指定数组支持的固定大小的列表。（对返回列表的更改会 “直写” 到数组）。此方法同 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "Collection.toArray()"
								},
								{
									"Type": "NodeText",
									"Data": "​ 一起，充当了基于数组的 API 与基于 Collection 额 API 之间的桥梁",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221023232756-15pj6ux",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-15pj6ux",
				"updated": "20221023234827"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " public class ArrayListTest4 {\n ​\n   public static void main(String[] args) {\n     ArrayList list = new ArrayList();\n ​\n     list.add(new Integer(1));\n     list.add(new Integer(2));\n     list.add(new Integer(3));\n     list.add(new Integer(4));\n     list.add(new Integer(5));\n     list.add(new Integer(6));\n ​\n     /**\n      * 不能将Object[]转换为Integer[]\n      */\n ​\n     // 这个地方会报错，类型转换异常\n     // Integer[] in = (Integer[]) list.toArray();\n     // for (int i = 0; i \u003c in.length; i++) {\n     // Integer integer = in[i];\n     // System.out.println(integer.intValue());\n     // }\n ​\n     Object[] in = list.toArray();\n     for (int i = 0; i \u003c in.length; i++) {\n       Integer integer = (Integer) in[i];\n       System.out.println(integer.intValue());\n     }\n   }\n ​\n }\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-0cf0dfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-0cf0dfa",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "结果"
				}
			]
		},
		{
			"ID": "20221023232756-p8z1cbr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-p8z1cbr",
				"updated": "20221023234904"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " 1\n 2\n 3\n 4\n 5\n 6\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-5fsxfku",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023232756-5fsxfku",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "ArrayList 操作自定义对象",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-jq711k9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-jq711k9",
				"updated": "20221023234909"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " public class ArrayListTest5 {\n ​\n   public static void main(String[] args) {\n     ArrayList list = new ArrayList();\n     list.add(new Point(2, 3));\n     list.add(new Point(2, 2));\n     list.add(list);\n     list.add(new Point(4, 4));\n ​\n ​\n     // for (int i = 0; i \u003c list.size(); i++) {\n     //  System.out.println((Point) list.get(i));\n     // }\n   \n     System.out.println(list.toString());\n   }\n ​\n }\n ​\n class Point {\n   int x;\n   int y;\n ​\n   public Point(int x, int y) {\n     this.x = x;\n     this.y = y;\n   }\n ​\n   public String toString() {\n     return \"x=\" + this.x + \",y=\" + this.y;\n   }\n ​\n }\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-kgepxs5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-kgepxs5",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "结果"
				}
			]
		},
		{
			"ID": "20221023232756-csycs0p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221023232756-csycs0p",
				"updated": "20221023234914"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " [x=2,y=3, x=2,y=2, (this Collection), x=4,y=4]\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-6s8agyz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023232756-6s8agyz",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "需要注意的几点",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-8z4uqem",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20221023232756-8z4uqem",
				"updated": "20221023234937"
			},
			"Children": [
				{
					"ID": "20221023232756-gdvb8pp",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20221023232756-gdvb8pp",
						"updated": "20221023232756"
					},
					"Children": [
						{
							"ID": "20221023232756-qp0j8cf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-qp0j8cf",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "集合中存放的依然是对象的引用而不是对象本身。"
								}
							]
						}
					]
				},
				{
					"ID": "20221023232756-sn510iu",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20221023232756-sn510iu",
						"updated": "20221023234925"
					},
					"Children": [
						{
							"ID": "20221023232756-745cfgk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-745cfgk",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "ArrayList 底层使用数组实现，在 JDK1.6，当使用不带参数的构造方法生成 ArrayList 对象时，实际上会在底层生成一个长度为 10 的 Object 类型数组。"
								}
							]
						},
						{
							"ID": "20221023232756-x8o5x7p",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221023232756-x8o5x7p",
								"updated": "20221023234920"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": " /**\n * Constructs an empty list with an initial capacity of ten.\n */\n public ArrayList() {\n     this(10);\n }\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023232756-6knvu72",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-6knvu72",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意：从 Java7 开始，已经不是在构造方法初始化为 10，而是在 add 方法检测，然后调用 grow 方法初始化为 10。Java7-Java17 都改变了这个策略。"
								}
							]
						},
						{
							"ID": "20221023232756-yvox9wn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-yvox9wn",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "Java17 沿用了这一策略。不是在初始化里面初始化的 10，而是在 add 的时候检测到不够才初始化的 10。Java17 源码分析如下："
								}
							]
						},
						{
							"ID": "20221023232756-eyy5nh2",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221023232756-eyy5nh2",
								"updated": "20221023234925"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": " private static final int DEFAULT_CAPACITY = 10;\n private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n ​\n public ArrayList() {\n     this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n }\n ​\n public boolean add(E e) {\n     modCount++;\n     add(e, elementData, size);\n     return true;\n }\n ​\n private void add(E e, Object[] elementData, int s) {\n     if (s == elementData.length)\n         elementData = grow();\n     elementData[s] = e;\n     size = s + 1;\n }\n ​\n private Object[] grow() {\n     return grow(size + 1);\n }\n ​\n private Object[] grow(int minCapacity) {\n     int oldCapacity = elementData.length;\n     if (oldCapacity \u003e 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n         int newCapacity = ArraysSupport.newLength(oldCapacity,\n           minCapacity - oldCapacity, /* minimum growth */\n             oldCapacity \u003e\u003e 1           /* preferred growth */);\n   return elementData = Arrays.copyOf(elementData, newCapacity);\n     } else {\n         return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\n     }\n }\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221023232756-2fixxof",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20221023232756-2fixxof",
						"updated": "20221023234937"
					},
					"Children": [
						{
							"ID": "20221023232756-2pygn4o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-2pygn4o",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "add"
								},
								{
									"Type": "NodeText",
									"Data": "​​ 方法剖析",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeSoftBreak",
									"Data": "\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeText",
									"Data": "**在 JDK1.6 中，如果增加的元素个数超过了 10 个，那么 ArrayList 底层会生成一个数组，长度为原来数组的 **",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "1.5倍+1"
								},
								{
									"Type": "NodeText",
									"Data": " ，然后将原数组的内容复制到新数据当中，并且后续增加的内容会方法哦新数组当中。JDK7 以后该规则有所变化，长度是原来数组的 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "1.5倍"
								},
								{
									"Type": "NodeText",
									"Data": " 。当新数组无法容纳增加的元素时，重复该过程。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023232756-r2pwqv5",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221023232756-r2pwqv5",
								"updated": "20221023234929"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": " public boolean add(E e) {\n     ensureCapacity(size + 1);  // Increments modCount!!\n     elementData[size++] = e;\n     return true;\n }\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023232756-tqhkjtc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-tqhkjtc",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "不够扩展 1.5 倍"
								}
							]
						},
						{
							"ID": "20221023232756-hk6w32c",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221023232756-hk6w32c",
								"updated": "20221023234933"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": " public void ensureCapacity(int minCapacity) {\n   modCount++;\n   int oldCapacity = elementData.length;\n   if (minCapacity \u003e oldCapacity) {\n       Object oldData[] = elementData;\n       int newCapacity = (oldCapacity * 3)/2 + 1;\n         if (newCapacity \u003c minCapacity)\n     newCapacity = minCapacity;\n           // minCapacity is usually close to size, so this is a win:\n           elementData = Arrays.copyOf(elementData, newCapacity);\n   }\n }\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023232756-yqld3bp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-yqld3bp",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Properties": {
										"id": ""
									},
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "[",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenParen",
											"Data": "(",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://img1.terwer.space/api/public/20221022183622.png",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")",
											"Properties": {
												"id": ""
											}
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023232756-ndkrvxb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-ndkrvxb",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意：Java7 以后增长的方式更加优雅，是用 位运算 计算的，效率更高。"
								}
							]
						},
						{
							"ID": "20221023232756-cbtwrq8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-cbtwrq8",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "a",
									"TextMarkAHref": "https://stackoverflow.com/a/52355461/4037224",
									"TextMarkTextContent": "https://stackoverflow.com/a/52355461/4037224"
								}
							]
						},
						{
							"ID": "20221023232756-02r8kxk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-02r8kxk",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "例如，Java17 的实现如下："
								}
							]
						},
						{
							"ID": "20221023232756-x4wbr0y",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221023232756-x4wbr0y",
								"updated": "20221023234937"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": " private Object[] grow(int minCapacity) {\n   int oldCapacity = elementData.length;\n   if (oldCapacity \u003e 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n     int newCapacity = ArraysSupport.newLength(oldCapacity,\n         minCapacity - oldCapacity, /* minimum growth */\n         oldCapacity \u003e\u003e 1           /* preferred growth */);\n     return elementData = Arrays.copyOf(elementData, newCapacity);\n   } else {\n     return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\n   }\n }\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221023232756-lp0ql71",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-lp0ql71",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "在线版代码查看："
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.dev/openjdk/jdk/blob/jdk-17+35/src/java.base/share/classes/java/util/ArrayList.java#L234",
									"TextMarkTextContent": "https://github.dev/openjdk/jdk/blob/jdk-17+35/src/java.base/share/classes/java/util/ArrayList.java#L234"
								}
							]
						},
						{
							"ID": "20221023232756-ux4ssld",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-ux4ssld",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Properties": {
										"id": ""
									},
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "[",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenParen",
											"Data": "(",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://img1.terwer.space/api/public/20221022180435.png",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")",
											"Properties": {
												"id": ""
											}
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221023232756-0fwst0l",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20221023232756-0fwst0l",
						"updated": "20221023232756"
					},
					"Children": [
						{
							"ID": "20221023232756-v91eksr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-v91eksr",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "对于 ArrayList 元素的删除操作，需要将被删除元素的后续元素向前移动，代价较高。"
								}
							]
						}
					]
				},
				{
					"ID": "20221023232756-4onip5m",
					"Type": "NodeListItem",
					"Data": "5",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 5,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NQ==",
						"Num": 5
					},
					"Properties": {
						"id": "20221023232756-4onip5m",
						"updated": "20221023232756"
					},
					"Children": [
						{
							"ID": "20221023232756-g1hpwx0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-g1hpwx0",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "集合当中只能防止对象的引用，无法放置原生数据类型，在 JDK1.5 以前，我们需要使用原生数据类型的包装类才能加入到集合当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20221023232756-5be0frn",
					"Type": "NodeListItem",
					"Data": "6",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 6,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Ng==",
						"Num": 6
					},
					"Properties": {
						"id": "20221023232756-5be0frn",
						"updated": "20221023232756"
					},
					"Children": [
						{
							"ID": "20221023232756-ybfyvho",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023232756-ybfyvho",
								"updated": "20221023232756"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "集合当中放置的都是  Object 类型， 因此取出来的也是 Object 类型，因此必须要使用强制类型转换将其转换为真正的类型（放置进去的类型）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221023232756-8gzf5i7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221023232756-8gzf5i7",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "生成 javadoc",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-jfz1yfi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-jfz1yfi",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "eclipse 点击 project-\u0026gt;Generate javadoc"
				}
			]
		},
		{
			"ID": "20221023232756-3w26oil",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-3w26oil",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221022110958.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-4ybd5al",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-4ybd5al",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "解决Eclipse生成的注释文档中文乱码问题"
				}
			]
		},
		{
			"ID": "20221023232756-udcs3jz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-udcs3jz",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "给 javadoc.exe 加上编码参数就 OK。"
				}
			]
		},
		{
			"ID": "20221023232756-xrxt1pn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-xrxt1pn",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "具体的："
				}
			]
		},
		{
			"ID": "20221023232756-wj9n4ag",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-wj9n4ag",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "**在 Eclipse 里 export 选 JavaDoc，在向导的最后一页的 **",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "Extra JavaDoc Options"
				},
				{
					"Type": "NodeText",
					"Data": "​​ 里填上参数即可。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-ye9noad",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-ye9noad",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "比如项目采用的是 UTF－8 的编码就填："
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "-encoding UTF-8 -charset UTF-8"
				},
				{
					"Type": "NodeText",
					"Data": "​​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-ss6llx7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-ss6llx7",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221022111624.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221023232756-gvlxr42",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-gvlxr42",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "效果"
				}
			]
		},
		{
			"ID": "20221023232756-951gppj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221023232756-951gppj",
				"updated": "20221023232756"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221022111856.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		}
	]
}