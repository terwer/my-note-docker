{
	"ID": "20221021222848-vlyagor",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16815193",
		"custom-desc": "基本方法publicclassarraylisttest{publicstaticvoidmain(string[]args){arraylistarraylist=newarraylist()_arraylistadd(arraylistadd(arraylistadd(arraylistadd(strings=(string)arraylistget()_strings=(string)arraylistget()_strings=(string)arraylistget()_strings=(str",
		"custom-slug": "arraylist-in-depth-analysis-z18oerm",
		"custom-vuepress-slug": "docs/001.后端开发/001.JavaSE/022.ArrayList深入分析.md",
		"custom-wordpress-post-id": "4326",
		"custom-yuque-post-id": "97542732_terwer/note",
		"id": "20221021222848-vlyagor",
		"tags": "结果,包装,操作,转换,基本,arraylist,deep,analysis",
		"title": "022.ArrayList深入分析",
		"updated": "20221023194550"
	},
	"Children": [
		{
			"ID": "20221021222848-0xkh947",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221021222848-0xkh947",
				"updated": "20221022015319"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "基本方法",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015320-40cqe3l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022015320-40cqe3l",
				"updated": "20221022015328"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ArrayListTest1 {\n\tpublic static void main(String[] args) {\n\t\tArrayList arrayList = new ArrayList();\n\t\tarrayList.add(\"hello\");\n\t\tarrayList.add(\"world\");\n\t\tarrayList.add(\"world\");\n\t\tarrayList.add(\"welcome\");\n\n\t\tString s1 = (String) arrayList.get(0);\n\t\tString s2 = (String) arrayList.get(1);\n\t\tString s3 = (String) arrayList.get(2);\n\t\tString s4 = (String) arrayList.get(3);\n\n\t\tSystem.out.println(s1);\n\t\tSystem.out.println(s2);\n\t\tSystem.out.println(s3);\n\t\tSystem.out.println(s4);\n\n\t\tSystem.out.println(\"-------------\");\n\t\tfor (int i = 0; i \u003c arrayList.size(); i++) {\n\t\t\tSystem.out.println(arrayList.get(i));\n\t\t}\n\n\t\t// arrayList.clear();\n\t\t// System.out.println(arrayList.size());\n\t\t// System.out.println(arrayList.isEmpty());\n\n\t\tarrayList.remove(0);\n\n\t\tSystem.out.println(\"-------------\");\n\t\tfor (int i = 0; i \u003c arrayList.size(); i++) {\n\t\t\tSystem.out.println(arrayList.get(i));\n\t\t}\n\n\t\tarrayList.remove(\"welcome\");\n\t\tSystem.out.println(\"-------------\");\n\t\tfor (int i = 0; i \u003c arrayList.size(); i++) {\n\t\t\tSystem.out.println(arrayList.get(i));\n\t\t}\n\n\t\tSystem.out.println(\"-----------------\");\n\n\t\tarrayList.add(\"aaa\");\n\t\tarrayList.add(\"bbb\");\n\n\t\tSystem.out.println(arrayList.indexOf(\"world\"));\n\t\tSystem.out.println(arrayList.lastIndexOf(\"world\"));\n\t\tSystem.out.println(arrayList.indexOf(\"aaa\"));\n\t}\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020041-ccmral0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022020041-ccmral0",
				"updated": "20221022020045"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020045-ljytjrb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022020045-ljytjrb",
				"updated": "20221022020108"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "hello\nworld\nworld\nwelcome\n-------------\nhello\nworld\nworld\nwelcome\n-------------\nworld\nworld\nwelcome\n-------------\nworld\nworld\n-----------------\n0\n1\n2\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015331-pc1hlz7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221022015331-pc1hlz7",
				"updated": "20221022015404"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "包装类与原生数据类型测试",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015404-draklmj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022015404-draklmj",
				"updated": "20221022020207"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ArrayListTest2 {\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\tlist.add(\"hello\");\n\t\tlist.add(new Integer(2));\n\t\n\t\tString str = (String)list.get(0);\n\t\tInteger in = (Integer)list.get(1);\n\t\t// String str2 = (String)list.get(1);\n\t\n\t\tSystem.out.println(str);\n\t\tSystem.out.println(in.intValue());\n\t\t// System.err.println(str2);\n\t}\n\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020116-acsbbvk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022020116-acsbbvk",
				"updated": "20221022020217"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020217-69ph7ka",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022020217-69ph7ka",
				"updated": "20221022020221"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "hello\n2\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020306-p1fjq9e",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221022020306-p1fjq9e",
				"updated": "20221022020345"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "包装类型的遍历与操作",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020313-yz1lv9j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022020313-yz1lv9j",
				"updated": "20221022020318"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ArrayListTest3 {\n\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\n\t\tlist.add(new Integer(3));\n\t\tlist.add(new Integer(4));\n\t\tlist.add(new Integer(5));\n\t\tlist.add(new Integer(6));\n\n\t\tint sum = 0;\n\t\tfor (int i = 0; i \u003c list.size(); i++) {\n\t\t\tInteger item = (Integer) list.get(i);\n\t\t\tsum += item.intValue();\n\t\t}\n\n\t\tSystem.out.println(sum);\n\t}\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020321-7ffa0w3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022020321-7ffa0w3",
				"updated": "20221022020323"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020323-h8l031d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022020323-h8l031d",
				"updated": "20221022020340"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "18\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015424-dbs3eb1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221022015424-dbs3eb1",
				"updated": "20221022015437"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "ArrayList 与数组之间的转换",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015438-58fmrc2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022015438-58fmrc2",
				"updated": "20221022015617"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ArrayListTest4 {\n\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\n\t\tlist.add(new Integer(1));\n\t\tlist.add(new Integer(2));\n\t\tlist.add(new Integer(3));\n\t\tlist.add(new Integer(4));\n\t\tlist.add(new Integer(5));\n\t\tlist.add(new Integer(6));\n\n\t\t/**\n\t\t * 不能将Object[]转换为Integer[]\n\t\t */\n\n\t\t// 这个地方会报错，类型转换异常\n\t\t// Integer[] in = (Integer[]) list.toArray();\n\t\t// for (int i = 0; i \u003c in.length; i++) {\n\t\t// Integer integer = in[i];\n\t\t// System.out.println(integer.intValue());\n\t\t// }\n\n\t\tObject[] in = list.toArray();\n\t\tfor (int i = 0; i \u003c in.length; i++) {\n\t\t\tInteger integer = (Integer) in[i];\n\t\t\tSystem.out.println(integer.intValue());\n\t\t}\n\t}\n\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020226-awr6ylx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022020226-awr6ylx",
				"updated": "20221022020400"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020400-wui4auq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022020400-wui4auq",
				"updated": "20221022020403"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "1\n2\n3\n4\n5\n6\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015604-cbxfnoq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221022015604-cbxfnoq",
				"updated": "20221022015643"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "ArrayList 操作自定义对象",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022015643-xebq0df",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022015643-xebq0df",
				"updated": "20221022015645"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ArrayListTest5 {\n\n\tpublic static void main(String[] args) {\n\t\tArrayList list = new ArrayList();\n\t\tlist.add(new Point(2, 3));\n\t\tlist.add(new Point(2, 2));\n\t\tlist.add(list);\n\t\tlist.add(new Point(4, 4));\n\n\n\t\t// for (int i = 0; i \u003c list.size(); i++) {\n\t\t//\tSystem.out.println((Point) list.get(i));\n\t\t// }\n\t\n\t\tSystem.out.println(list.toString());\n\t}\n\n}\n\nclass Point {\n\tint x;\n\tint y;\n\n\tpublic Point(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic String toString() {\n\t\treturn \"x=\" + this.x + \",y=\" + this.y;\n\t}\n\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020409-quawxzt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022020409-quawxzt",
				"updated": "20221022020411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022020411-ivkkfae",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cGxhaW50ZXh0",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221022020411-ivkkfae",
				"updated": "20221022020424"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cGxhaW50ZXh0",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[x=2,y=3, x=2,y=2, (this Collection), x=4,y=4]\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022105735-y81a2ms",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221022105735-y81a2ms",
				"updated": "20221022105755"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "需要注意的几点",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022105745-shsgfeu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20221022105745-shsgfeu",
				"updated": "20221022164839"
			},
			"Children": [
				{
					"ID": "20221022105748-3riadaq",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20221022105748-3riadaq",
						"updated": "20221022105827"
					},
					"Children": [
						{
							"ID": "20221022105748-abxjb8c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022105748-abxjb8c",
								"updated": "20221022105827"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "集合中存放的依然是对象的引用而不是对象本身。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221022164407-hwgd1ng",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20221022164407-hwgd1ng",
						"updated": "20221022164839"
					},
					"Children": [
						{
							"ID": "20221022164407-uiokrce",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022164407-uiokrce",
								"updated": "20221022171644"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ArrayList 底层使用数组实现，在 JDK1.6，当使用不带参数的构造方法生成 ArrayList 对象时，实际上会在底层生成一个长度为 10 的 Object 类型数组。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022164806-ej1ugh6",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221022164806-ej1ugh6",
								"updated": "20221022164839"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "/**\n* Constructs an empty list with an initial capacity of ten.\n*/\npublic ArrayList() {\n    this(10);\n}\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022171646-5edsozs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022171646-5edsozs",
								"updated": "20221022172025"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "注意：从 Java7 开始，已经不是在构造方法初始化为 10，而是在 add 方法检测，然后调用 grow 方法初始化为 10。Java7-Java17 都改变了这个策略。"
								}
							]
						},
						{
							"ID": "20221022172012-57euww4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022172012-57euww4",
								"updated": "20221022172043"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "Java17 沿用了这一策略。不是在初始化里面初始化的 10，而是在 add 的时候检测到不够才初始化的 10。Java17 源码分析如下："
								}
							]
						},
						{
							"ID": "20221022165954-b97ls1s",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221022165954-b97ls1s",
								"updated": "20221022171141"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "private static final int DEFAULT_CAPACITY = 10;\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\npublic boolean add(E e) {\n    modCount++;\n    add(e, elementData, size);\n    return true;\n}\n\nprivate void add(E e, Object[] elementData, int s) {\n    if (s == elementData.length)\n        elementData = grow();\n    elementData[s] = e;\n    size = s + 1;\n}\n\nprivate Object[] grow() {\n    return grow(size + 1);\n}\n\nprivate Object[] grow(int minCapacity) {\n    int oldCapacity = elementData.length;\n    if (oldCapacity \u003e 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        int newCapacity = ArraysSupport.newLength(oldCapacity,\n    \t    minCapacity - oldCapacity, /* minimum growth */\n            oldCapacity \u003e\u003e 1           /* preferred growth */);\n\treturn elementData = Arrays.copyOf(elementData, newCapacity);\n    } else {\n        return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\n    }\n}\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221022172808-cho66yv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 3,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "Mw==",
				"Num": 3
			},
			"Properties": {
				"id": "20221022172808-cho66yv",
				"updated": "20221022192047"
			},
			"Children": [
				{
					"ID": "20221022172811-csmyfva",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20221022172811-csmyfva",
						"updated": "20221022192047"
					},
					"Children": [
						{
							"ID": "20221022172811-j16j2af",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022172811-j16j2af",
								"updated": "20221022183851"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "add"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法剖析",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022190704-np3uvlq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022190704-np3uvlq",
								"updated": "20221022192047"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 JDK1.6 中，如果增加的元素个数超过了 10 个，那么 ArrayList 底层会生成一个数组，长度为原来数组的 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "1.5倍+1"
								},
								{
									"Type": "NodeText",
									"Data": " ，然后将原数组的内容复制到新数据当中，并且后续增加的内容会方法哦新数组当中。JDK7 以后该规则有所变化，长度是原来数组的 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "strong",
									"TextMarkTextContent": "1.5倍"
								},
								{
									"Type": "NodeText",
									"Data": " 。当新数组无法容纳增加的元素时，重复该过程。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022172812-58jg4oc",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221022172812-58jg4oc",
								"updated": "20221022172843"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public boolean add(E e) {\n    ensureCapacity(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022172850-dg64oq6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022172850-dg64oq6",
								"updated": "20221022172900"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不够扩展 1.5 倍",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022172918-27s7vwo",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221022172918-27s7vwo",
								"updated": "20221022172949"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public void ensureCapacity(int minCapacity) {\n\tmodCount++;\n\tint oldCapacity = elementData.length;\n\tif (minCapacity \u003e oldCapacity) {\n\t    Object oldData[] = elementData;\n\t    int newCapacity = (oldCapacity * 3)/2 + 1;\n\t\t    if (newCapacity \u003c minCapacity)\n\t\tnewCapacity = minCapacity;\n\t        // minCapacity is usually close to size, so this is a win:\n\t        elementData = Arrays.copyOf(elementData, newCapacity);\n\t}\n}\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022180508-u0dz60q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022180508-u0dz60q",
								"updated": "20221022183638"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Properties": {
										"id": ""
									},
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "[",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenParen",
											"Data": "(",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://img1.terwer.space/api/public/20221022183622.png",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")",
											"Properties": {
												"id": ""
											}
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022174435-8x7yb7r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022174435-8x7yb7r",
								"updated": "20221022174722"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "注意：Java7 以后增长的方式更加优雅，是用 位运算 计算的，效率更高。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022175705-k9dv22a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022175705-k9dv22a",
								"updated": "20221022175710"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "a",
									"TextMarkAHref": "https://stackoverflow.com/a/52355461/4037224",
									"TextMarkTextContent": "https://stackoverflow.com/a/52355461/4037224"
								}
							]
						},
						{
							"ID": "20221022175704-zupl0ru",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022175704-zupl0ru",
								"updated": "20221022175704"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "例如，Java17 的实现如下：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022174633-x71k2qt",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"CodeBlockFenceChar": 96,
							"CodeBlockFenceLen": 3,
							"CodeBlockOpenFence": "YGBg",
							"CodeBlockInfo": "amF2YQ==",
							"CodeBlockCloseFence": "YGBg",
							"Properties": {
								"id": "20221022174633-x71k2qt",
								"updated": "20221022174636"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ==",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "private Object[] grow(int minCapacity) {\n\tint oldCapacity = elementData.length;\n\tif (oldCapacity \u003e 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n\t\tint newCapacity = ArraysSupport.newLength(oldCapacity,\n\t\t\t\tminCapacity - oldCapacity, /* minimum growth */\n\t\t\t\toldCapacity \u003e\u003e 1           /* preferred growth */);\n\t\treturn elementData = Arrays.copyOf(elementData, newCapacity);\n\t} else {\n\t\treturn elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\n\t}\n}\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```",
									"CodeBlockFenceLen": 3,
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221022174847-amm3oy3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022174847-amm3oy3",
								"updated": "20221022174858"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在线版代码查看：",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "a",
									"TextMarkAHref": "https://github.dev/openjdk/jdk/blob/jdk-17+35/src/java.base/share/classes/java/util/ArrayList.java#L234",
									"TextMarkTextContent": "https://github.dev/openjdk/jdk/blob/jdk-17+35/src/java.base/share/classes/java/util/ArrayList.java#L234"
								}
							]
						},
						{
							"ID": "20221022180452-9vq7cx8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221022180452-9vq7cx8",
								"updated": "20221022180454"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Properties": {
										"id": ""
									},
									"Children": [
										{
											"Type": "NodeBang",
											"Data": "!",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenBracket",
											"Data": "[",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseBracket",
											"Data": "]",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeOpenParen",
											"Data": "(",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://img1.terwer.space/api/public/20221022180435.png",
											"Properties": {
												"id": ""
											}
										},
										{
											"Type": "NodeCloseParen",
											"Data": ")",
											"Properties": {
												"id": ""
											}
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221023132223-peyd18o",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221023132223-peyd18o",
				"updated": "20221023194550"
			},
			"Children": [
				{
					"ID": "20221023132228-rterg8v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221023132228-rterg8v",
						"updated": "20221023132228"
					},
					"Children": [
						{
							"ID": "20221023132228-60luy11",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023132228-60luy11",
								"updated": "20221023132840"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 ArrayList 元素的删除操作，需要将被删除元素的后续元素向前移动，代价较高。"
								}
							]
						}
					]
				},
				{
					"ID": "20221023132842-kcuyqjz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221023132842-kcuyqjz",
						"updated": "20221023133120"
					},
					"Children": [
						{
							"ID": "20221023132842-sawosh5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023132842-sawosh5",
								"updated": "20221023133120"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "集合当中只能防止对象的引用，无法放置原生数据类型，在 JDK1.5 以前，我们需要使用原生数据类型的包装类才能加入到集合当中。"
								}
							]
						}
					]
				},
				{
					"ID": "20221023194319-q89e1bv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20221023194319-q89e1bv",
						"updated": "20221023194550"
					},
					"Children": [
						{
							"ID": "20221023194319-9mawhz0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221023194319-9mawhz0",
								"updated": "20221023194550"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "集合当中放置的都是  Object 类型， 因此取出来的也是 Object 类型，因此必须要使用强制类型转换将其转换为真正的类型（放置进去的类型）。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221022110818-r34cf6k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221022110818-r34cf6k",
				"updated": "20221022110828"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "生成 javadoc",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022110828-4mc47iq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022110828-4mc47iq",
				"updated": "20221022110844"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "eclipse 点击 project-\u003eGenerate javadoc",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111010-ey5fo2h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111010-ey5fo2h",
				"updated": "20221022111011"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221022110958.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111442-1udmhcs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111442-1udmhcs",
				"updated": "20221022111445"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": "解决Eclipse生成的注释文档中文乱码问题"
				}
			]
		},
		{
			"ID": "20221022111442-t7i4pbs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111442-t7i4pbs",
				"updated": "20221022111442"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给 javadoc.exe 加上编码参数就 OK。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111442-5w6v6zq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111442-5w6v6zq",
				"updated": "20221022111442"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体的：",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111442-bqmkg0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111442-bqmkg0a",
				"updated": "20221022111507"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Eclipse 里 export 选 JavaDoc，在向导的最后一页的 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "Extra JavaDoc Options"
				},
				{
					"Type": "NodeText",
					"Data": "​ 里填上参数即可。",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111442-7y8cqvi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111442-7y8cqvi",
				"updated": "20221022111457"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如项目采用的是 UTF－8 的编码就填：",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "-encoding UTF-8 -charset UTF-8"
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111457-mydknm1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111457-mydknm1",
				"updated": "20221022111635"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221022111624.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111639-meog2e1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111639-meog2e1",
				"updated": "20221022111641"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "效果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221022111642-2tetyig",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221022111642-2tetyig",
				"updated": "20221022111908"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221022111856.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		}
	]
}