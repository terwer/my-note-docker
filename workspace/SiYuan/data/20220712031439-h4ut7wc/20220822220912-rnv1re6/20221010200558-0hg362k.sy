{
	"ID": "20221010200558-0hg362k",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16798289",
		"custom-desc": "java中的原生数据类型共有种_）整型_使用int表示。（位））字节型_使用byte表示。（表示～之间的个整数位）。）短整型_使用short表示。（位））长整型_使用long表示。（位））单精度浮点型_使用float表示。所谓浮点型指的就是小数也叫做实数比如。）双精度浮点型_使用double表示。双精度浮点型表示的数据范围要比单精度浮点型大。）字符型_使用char表示（char是character的缩写）。所谓字符就是单个的字符表示比如字母a或者中文张外面用单引号包围上。比如chara=‘b’_charb",
		"custom-slug": "pitfalls-of-using-primitive-data-types",
		"custom-vuepress-slug": "docs/001.后端开发/001.JavaSE/003.Java_SE_第三讲_原生数据类型使用陷阱.md",
		"custom-wordpress-post-id": "4293",
		"custom-yuque-post-id": "96952939_terwer/note",
		"id": "20221010200558-0hg362k",
		"tags": "类型,表示,使用,范围,变量,陷阱",
		"title": "003.Java_SE_第三讲：原生数据类型使用陷阱",
		"updated": "20221010201037"
	},
	"Children": [
		{
			"ID": "20221010200558-r6isssq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20221010200558-r6isssq",
				"updated": "20221010201037"
			},
			"Children": [
				{
					"ID": "20221010200709-e6bahxv",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20221010200709-e6bahxv",
						"updated": "20221010200709"
					},
					"Children": [
						{
							"ID": "20221010200709-0z6l9iq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-0z6l9iq",
								"updated": "20221010200709"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 中的原生数据类型共有 8 种：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200734-o9la83q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200734-o9la83q",
								"updated": "20221010200734"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1） 整型：使用 int 表示。（32 位）",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200738-n7m25zu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200738-n7m25zu",
								"updated": "20221010200740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2） 字节型：使用 byte 表示。（表示-128～127 之间的 256 个整数， 8 位）。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200743-ow5pel0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200743-ow5pel0",
								"updated": "20221010200743"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "3）短整型：使用 short 表示。（16 位）",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200746-00fcxb0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200746-00fcxb0",
								"updated": "20221010200746"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4）长整型：使用 long 表示。（64 位）",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200749-czkqvnv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200749-czkqvnv",
								"updated": "20221010200749"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5）单精度浮点型：使用 float 表示。所谓浮点型，指的就是小数，也叫做实数，比如 1.2。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200751-ppq6nb2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200751-ppq6nb2",
								"updated": "20221010200751"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "6）双精度浮点型：使用 double 表示。双精度浮点型表示的数据范围要比单精度浮点型大。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200755-qhjaqw6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200755-qhjaqw6",
								"updated": "20221010200755"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "7）字符型：使用 char 表示（char 是 character 的缩写）。所谓字符，就是单个的字符表示，",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeSoftBreak",
									"Data": "\n",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeText",
									"Data": "比如字母 a，或者中文张，外面用单引号包围上。比如 char a = ‘B’; char b = ‘张’;",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200757-7vb2qsy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200757-7vb2qsy",
								"updated": "20221010200757"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "8）布尔类型，使用 boolean 表示。布尔类型只有两种可能值，分别是 true 与 false。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010200709-ly0apmz",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20221010200709-ly0apmz",
						"updated": "20221010201037"
					},
					"Children": [
						{
							"ID": "20221010200709-ibtxmpr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-ibtxmpr",
								"updated": "20221010201037"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 中的所有浮点类型默认情况下都是 double。不能将 double 类型的值赋给 float 类型的变量，即便该 double 类型的值处于 float 类型的范围内也是不可以的。总之，能否成功赋值取决于等号右边的值类型与等号左边的变量类型是否一致。"
								}
							]
						}
					]
				},
				{
					"ID": "20221010200709-1htksmr",
					"Type": "NodeListItem",
					"Data": "3",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 3,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mw==",
						"Num": 3
					},
					"Properties": {
						"id": "20221010200709-1htksmr",
						"updated": "20221010200709"
					},
					"Children": [
						{
							"ID": "20221010200709-ntd9cex",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-ntd9cex",
								"updated": "20221010200709"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如何将 double 类型的值赋给 float 类型的变量？答案就是",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200808-xsms8p1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200808-xsms8p1",
								"updated": "20221010200808"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "(1)强制类型转换，将 double 类型的值强制转换为 float 类型。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200812-sz1g5gr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200812-sz1g5gr",
								"updated": "20221010200821"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "(2)使用 java 语言的支持。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200816-7crc9o4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200816-7crc9o4",
								"updated": "20221010200816"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "强制转换的语法： 类型 变量名 = （类型）变量值;",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010200709-46n5izw",
					"Type": "NodeListItem",
					"Data": "4",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 4,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NA==",
						"Num": 4
					},
					"Properties": {
						"id": "20221010200709-46n5izw",
						"updated": "20221010200709"
					},
					"Children": [
						{
							"ID": "20221010200709-55h0y3l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-55h0y3l",
								"updated": "20221010200830"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量在使用前必须要赋值；变量必须要声明其类型方可使用；变量在使用前必须要定义，并且只能定义一次。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010200709-vdqnobi",
					"Type": "NodeListItem",
					"Data": "5",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 5,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "NQ==",
						"Num": 5
					},
					"Properties": {
						"id": "20221010200709-vdqnobi",
						"updated": "20221010200709"
					},
					"Children": [
						{
							"ID": "20221010200709-hkjos69",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-hkjos69",
								"updated": "20221010200709"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如下代码无法通过编译：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200835-57nsxx3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200835-57nsxx3",
								"updated": "20221010200835"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int a = 1;",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010200838-phm9m0q",
					"Type": "NodeListItem",
					"Data": "6",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 6,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Ng==",
						"Num": 6
					},
					"Properties": {
						"id": "20221010200838-phm9m0q",
						"updated": "20221010200838"
					},
					"Children": [
						{
							"ID": "20221010200838-xbslcjs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200838-xbslcjs",
								"updated": "20221010200838"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short b = a;",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200842-guu3jje",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200842-guu3jje",
								"updated": "20221010200845"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "a 是 int 类型，b 是 short 类型，int 类型表示的数据范围要比 short 类型大，不能将表示范围大的值赋给表示范围小的变量。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010200709-akrftnn",
					"Type": "NodeListItem",
					"Data": "7",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 7,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Nw==",
						"Num": 7
					},
					"Properties": {
						"id": "20221010200709-akrftnn",
						"updated": "20221010200900"
					},
					"Children": [
						{
							"ID": "20221010200709-r5wgh1t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-r5wgh1t",
								"updated": "20221010200709"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如下代码可以通过编译：",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200850-h4z2f0q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200850-h4z2f0q",
								"updated": "20221010200850"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short a = 1;",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200853-ekj3htt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200853-ekj3htt",
								"updated": "20221010200853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int b = a;",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221010200857-mfhk0cv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200857-mfhk0cv",
								"updated": "20221010200900"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "a 是 short 类型，b 是 int 类型，int 类型表示的数据范围要比 short 类型大，可以将表示范围小的值赋给表示范围大的变量。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221010200709-nr5ue0m",
					"Type": "NodeListItem",
					"Data": "8",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 8,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "OA==",
						"Num": 8
					},
					"Properties": {
						"id": "20221010200709-nr5ue0m",
						"updated": "20221010200904"
					},
					"Children": [
						{
							"ID": "20221010200709-kuvhxpz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221010200709-kuvhxpz",
								"updated": "20221010200904"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "总结：可以将表示范围小的值赋给表示范围大的变量；但不能直接将表示范围大的值赋给表示范围小的变量，只能通过强制类型转换实现。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221010200722-h0qfr8w",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221010200722-h0qfr8w",
				"style": "color: var(--b3-card-success-color); background-color: var(--b3-card-success-background);",
				"updated": "20221010200709"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e ",
					"Properties": {
						"id": ""
					}
				},
				{
					"ID": "20221010200709-53p8hbb",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221010200709-53p8hbb",
						"updated": "20221010200729"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "文章更新历史",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"ID": "20221010200709-tdufwvd",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221010200709-tdufwvd",
						"updated": "20221010200709"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "2022/05/08 fix:修改备注。",
							"Properties": {
								"id": ""
							}
						}
					]
				}
			]
		}
	]
}