{
	"ID": "20221018222659-rillyot",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16805692",
		"custom-desc": "数组查找publicclassarraysearchtest{publicstaticvoidmain(string[]args){int[]a=newint[]{}_intvalue=_intresult=search(a)_if(result){systemoutprintln(}else{systemoutprintln(}}publicstaticintsearch(int[]arrayintvalue){intindex=_for(inti=_ii){if(array[i]==value){in",
		"custom-slug": "java-array-search-method-and-dictat-1ehfda",
		"custom-vuepress-slug": "docs/001.后端开发/001.JavaSE/019.Java数组的查找方式及二分查找.md",
		"custom-wordpress-post-id": "4313",
		"custom-yuque-post-id": "97241868_terwer/note",
		"id": "20221018222659-rillyot",
		"tags": "查找,数组,二分,必须,有序,二分查找,search,binary-search",
		"title": "019.Java数组的查找方式及二分查找",
		"updated": "20221125231959"
	},
	"Children": [
		{
			"ID": "20221018222659-xlvudz0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221018222659-xlvudz0",
				"updated": "20221125231959"
			},
			"Children": [
				{
					"ID": "20221018222756-qp24q2y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221018222756-qp24q2y",
						"updated": "20221125231959"
					},
					"Children": [
						{
							"ID": "20221018222756-fajd70g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221018222756-fajd70g",
								"updated": "20221018222800"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组查找"
								}
							]
						},
						{
							"ID": "20221018222801-y5volwy",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20221018222801-y5volwy",
								"updated": "20221125231959"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public class ArraySearchTest {\n    public static void main(String[] args) {\n        int[] a = new int[]{1, 5, 6, 7, 10, 3, 9};\n        int value = 9;\n        int result = search(a, 9);\n\n        if (result \u003e 0) {\n            System.out.println(\"找到了，索引为\" + result);\n        } else {\n            System.out.println(\"未找到\");\n        }\n    }\n\n    public static int search(int[] array, int value) {\n         int index = -1;\n        for (int i = 0; i \u003c array.length; i++) {\n            if (array[i] == value) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221018223433-xq35vqm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221018223433-xq35vqm",
				"updated": "20221018231543"
			},
			"Children": [
				{
					"ID": "20221018224002-1b8fyji",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221018224002-1b8fyji",
						"updated": "20221018231543"
					},
					"Children": [
						{
							"ID": "20221018224002-ko0epge",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221018224002-ko0epge",
								"updated": "20221018224334"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "二分查找（Binary Search）：待查找的数组必须有序"
								}
							]
						},
						{
							"ID": "20221018224612-7608k3k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221018224612-7608k3k",
								"updated": "20221018230740"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1,2,3,4,5,6,7,8,9"
								}
							]
						},
						{
							"ID": "20221018224916-d47lli8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221018224916-d47lli8",
								"updated": "20221018230752"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "10"
								}
							]
						},
						{
							"ID": "20221018224018-5ph3mg4",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20221018224018-5ph3mg4",
								"updated": "20221018231114"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "public static int binarySearch(int[] array, int value) {\n        int left = 0;\n        int right = array.length - 1;\n        int middle;\n\n        while (left \u003c= right) {\n            middle = (left + right) / 2;\n\n            for (int k = 0; k \u003c array.length; k++) {\n                System.out.print(array[k]);\n                if (k == middle) {\n                    System.out.print(\"#\");\n                }\n                System.out.print(\" \");\n            }\n\n            System.out.println();\n\n            if (array[middle] == value) {\n                return middle;\n            }\n\n            if (value \u003e array[middle]) {\n                left = middle + 1;\n            }\n\n            if (value \u003c array[middle]) {\n                right = middle - 1;\n            }\n        }\n\n        return -1;\n    }\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20221018231049-q6zg2dm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221018231049-q6zg2dm",
								"updated": "20221018231053"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "效果"
								}
							]
						},
						{
							"ID": "20221018231054-9pavan2",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20221018231054-9pavan2",
								"updated": "20221018231543"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "1 2 3 4 5# 6 7 8 9 \n1 2 3 4 5 6 7# 8 9 \n1 2 3 4 5 6 7 8# 9  \n1 2 3 4 5 6 7 8 9# \n找到了，索引为8\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221018231044-r4ff40e",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221018231044-r4ff40e",
				"updated": "20221019003841"
			},
			"Children": [
				{
					"ID": "20221018231313-5fv7xo6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221018231313-5fv7xo6",
						"updated": "20221019003841"
					},
					"Children": [
						{
							"ID": "20221018231313-1i71fby",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221018231313-1i71fby",
								"updated": "20221018231534"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "随机生成50个数字（整数），每个数字的范围是[10,50]，统计每个数字出现的次数以及出现次数最多的数字与它的个数 ，最后将每个数字及其出现次数打印出来，如果某个数字出现次数为 0，则不要打印它。打印时按照数字的升序排列。"
								}
							]
						},
						{
							"ID": "20221018231536-56ooynn",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20221018231536-56ooynn",
								"updated": "20221019001922"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "import java.util.Random;\n\n/**\n * @name: WorkTest\n * @author: terwer\n * @date: 2022-10-19 00:10\n **/\npublic class WorkTest {\n    public static void main(String[] args) {\n        int[] nums = new int[50];\n\n        Random random = new Random();\n        for (int i = 0; i \u003c nums.length; i++) {\n            nums[i] = 10 + random.nextInt(50 - 10 + 1);\n        }\n\n\n        for (int j = 10; j \u003c= 50; j++) {\n            int count = 0;\n            for (int m = 0; m \u003c nums.length; m++) {\n                if (nums[m] == j) {\n                    count++;\n                }\n            }\n\n            if (count \u003e 0) {\n                System.out.println(j + \"出现的次数：\" + count);\n            }\n        }\n\n\n//        for (int k = 0; k \u003c nums.length; k++) {\n//            System.out.println(nums[k]);\n//        }\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						},
						{
							"ID": "20221019003006-eqb7nts",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221019003006-eqb7nts",
								"updated": "20221019003013"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "更好的实现："
								}
							]
						},
						{
							"ID": "20221019003014-yoxn029",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20221019003014-yoxn029",
								"updated": "20221019003841"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker",
									"CodeBlockInfo": "amF2YQ=="
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "import java.util.Random;\n\n/**\n * @name: WorkTest\n * @author: terwer\n * @date: 2022-10-19 00:10\n **/\npublic class WorkTest2 {\n    public static void main(String[] args) {\n        int[] count = new int[41];\n\n        Random random = new Random();\n        for (int i = 0; i \u003c 50; i++) {\n            int number = 10 + random.nextInt(50 - 10 + 1);\n            System.out.println(number);\n            count[number - 10]++;\n        }\n\n\n        for (int j = 0; j \u003c count.length; j++) {\n            if (count[j] == 0) {\n                continue;\n            }\n\n            System.out.println((10 + j) + \"出现的次数：\" + count[j]);\n        }\n\n        int max = count[0];\n        int maxNum = 10;\n        for (int k = 0; k \u003c count.length; k++) {\n            if (max \u003c count[k]) {\n                max = count[k];\n            }\n\n            if (max == count[k]) {\n                maxNum = k + 10;\n                System.out.println(maxNum);\n            }\n        }\n        System.out.println(\"最大的数字出现的次数：\" + max);\n    }\n}\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221019003000-hafagwk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221019003000-hafagwk"
			}
		}
	]
}