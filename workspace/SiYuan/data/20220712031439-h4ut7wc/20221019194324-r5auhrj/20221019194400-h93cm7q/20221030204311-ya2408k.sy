{
	"ID": "20221030204311-ya2408k",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"custom-cnblogs-post-id": "16849557",
		"custom-conf-post-id": "17301512",
		"custom-desc": "重要特性总结struts的类型转换对于个原生数据类型以及datestring等常见类型struts可以使内建的类型转换器实现自动的转换_但对于自定义的对象类型来说需要我们自己指定类型转换的方式即自定义类型转换器。对于自定义类型的转换器来说需要提供三个信息_action的名字action中待转换的属性名以及该属性对应的类型转换器。其中action的名字是通过属性文件的文件名​​来获得的action中待转换的属性名是通过属性文件中的key​​来获得的该属性对应的类型转换器是通过该key​​对应的value​​",
		"custom-kms-post-id": "1843b88122bcc3461f4ca924d8180dd7",
		"custom-slug": "struts2-type-conversion-single-object-in-depth-research-z2gmzxt",
		"custom-vuepress-slug": "docs/001.后端开发/006.Struts2/006.Struts2类型转换之单个对象深入研究.md",
		"custom-wordpress-post-id": "4356",
		"custom-yuque-post-id": "104391482_terwer/note",
		"id": "20221030204311-ya2408k",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221030204704-bo4cir7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20221101230948-letw1am\u0026quot;,\u0026quot;scrollTop\u0026quot;:3779,\u0026quot;focusId\u0026quot;:\u0026quot;20221101230948-letw1am\u0026quot;,\u0026quot;focusStart\u0026quot;:230,\u0026quot;focusEnd\u0026quot;:230}",
		"tags": "类型,转换器,类型转换,属性,转换,struts,struts2,type,type-converter,converter",
		"title": "006.Struts2类型转换之单个对象深入研究",
		"updated": "20221101231723"
	},
	"Children": [
		{
			"ID": "20221030204704-bo4cir7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221030204704-bo4cir7",
				"updated": "20221030204802"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "重要特性总结",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221030204716-ao1p5x4",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1,
				"Start": 1,
				"Delimiter": 46,
				"Padding": 3,
				"Marker": "MQ==",
				"Num": 1
			},
			"Properties": {
				"id": "20221030204716-ao1p5x4",
				"updated": "20221030215720"
			},
			"Children": [
				{
					"ID": "20221030204717-13q5q6v",
					"Type": "NodeListItem",
					"Data": "1",
					"ListData": {
						"Typ": 1,
						"Start": 1,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "MQ==",
						"Num": 1
					},
					"Properties": {
						"id": "20221030204717-13q5q6v",
						"updated": "20221030204717"
					},
					"Children": [
						{
							"ID": "20221030204717-q3apuac",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221030204717-q3apuac",
								"updated": "20221030204923"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Struts2 的类型转换，对于 8 个原生数据类型以及 Date，String 等常见类型，Struts2 可以使内建的类型转换器实现自动的转换；但对于自定义的对象类型来说，需要我们自己指定类型转换的方式，即自定义类型转换器。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				},
				{
					"ID": "20221030204924-c4in30d",
					"Type": "NodeListItem",
					"Data": "2",
					"ListData": {
						"Typ": 1,
						"Tight": true,
						"Start": 2,
						"Delimiter": 46,
						"Padding": 3,
						"Marker": "Mg==",
						"Num": 2
					},
					"Properties": {
						"id": "20221030204924-c4in30d",
						"updated": "20221030215720"
					},
					"Children": [
						{
							"ID": "20221030204924-br9c8mu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221030204924-br9c8mu",
								"updated": "20221030215323"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于自定义类型的转换器来说，需要提供三个信息：Action 的名字、Action 中待转换的属性名以及该属性对应的类型转换器。",
									"Properties": {
										"id": ""
									}
								}
							]
						},
						{
							"ID": "20221030215440-bl1irds",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221030215440-bl1irds",
								"updated": "20221030215720"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "其中 Action 的名字是通过属性文件的 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "文件名"
								},
								{
									"Type": "NodeText",
									"Data": "​​ 来获得的、 Action 中待转换的属性名是通过属性文件中的 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "key "
								},
								{
									"Type": "NodeText",
									"Data": "​​ 来获得的，该属性对应的类型转换器是通过该 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "key"
								},
								{
									"Type": "NodeText",
									"Data": "​​ 对应的 ",
									"Properties": {
										"id": ""
									}
								},
								{
									"Type": "NodeTextMark",
									"Properties": {
										"id": ""
									},
									"TextMarkType": "code",
									"TextMarkTextContent": "value"
								},
								{
									"Type": "NodeText",
									"Data": "​​ 来获得的。",
									"Properties": {
										"id": ""
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221101223312-fuuq7ct",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221101223312-fuuq7ct",
				"updated": "20221101223312"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "StrutsTypeConverter",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101223340-108bcij",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221101223340-108bcij",
				"updated": "20221101223340"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Base class for type converters used in Struts. This class provides two abstract methods that are used to convert both to and from strings -- the critical functionality that is core to Struts's type coversion system.",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101223340-5amvfcy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221101223340-5amvfcy",
				"updated": "20221101223340"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Type converters do not have to use this class. It is merely a helper base class, although it is recommended that you use this class as it provides the common type conversion contract required for all web-based type conversion.",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101223340-xjq75ar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221101223340-xjq75ar",
				"updated": "20221101223351"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "There's a hook (fall back method) called ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong code",
					"TextMarkTextContent": "performFallbackConversion"
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "strong",
					"TextMarkTextContent": " of which could be used to perform some fallback conversion if"
				},
				{
					"Type": "NodeText",
					"Data": " ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "convertValue"
				},
				{
					"Type": "NodeText",
					"Data": "​ method of this failed. By default it just ask its super class (Ognl's DefaultTypeConverter) to do the conversion.",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101223340-5a6z1iw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221101223340-5a6z1iw",
				"updated": "20221101223340"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "To allow the framework to recognize that a conversion error has occurred, throw an XWorkException or preferable a TypeConversionException.",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224511-ojfx5v6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221101224511-ojfx5v6",
				"updated": "20221101224533"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "## ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "使用 StrutsTypeConverter 进行类型转换实例",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224534-lhzsewe",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224534-lhzsewe",
				"updated": "20221101224544"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "新建一个 test.jsp",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224544-jkripyq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221101224544-jkripyq",
				"updated": "20221101224557"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%\u003e\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003cmeta charset=\"UTF-8\"\u003e\n\u003ctitle\u003eStruts2.3 converter\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\t\u003ch1\u003e使用分号分隔用户名和密码信息\u003c/h1\u003e\n\n\t\u003cform action=\"userAction.action\"\u003e\n\n\t\tuser info: \u003cinput type=\"text\" name=\"user\"/\u003e\u003cbr/\u003e\n\t\t\u003cinput type=\"submit\" value=\"submit\"/\u003e\n\n\t\u003c/form\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224642-uwt9v5t",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224642-uwt9v5t",
				"updated": "20221101224652"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "流程处理 Struts.xml",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224652-3p6y6a6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221101224652-3p6y6a6",
				"updated": "20221101224715"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\" ?\u003e\n\u003c!DOCTYPE struts PUBLIC\n\t\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\t\"http://struts.apache.org/dtds/struts-2.3.dtd\"\u003e\n\n\u003cstruts\u003e\n\n\t\u003cpackage name=\"struts2\" extends=\"struts-default\"\u003e\n\t\t\u003caction name=\"userAction\" class=\"space.terwer.struts23.UserAction\"\u003e\n\t\t\t\u003cresult name=\"success\"\u003e/output.jsp\u003c/result\u003e\n\t\t\u003c/action\u003e\n\t\u003c/package\u003e\n\n\u003c/struts\u003e\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224558-swsv1s2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224558-swsv1s2",
				"updated": "20221101224616"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "Action 处理类 UserAction",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224617-2xha4oh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221101224617-2xha4oh",
				"updated": "20221101224640"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package space.terwer.struts23;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\nimport space.terwer.bean.User;\n\npublic class UserAction extends ActionSupport {\n\tprivate User user;\n\n\tpublic User getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(User user) {\n\t\tthis.user = user;\n\t}\n\n\t@Override\n\tpublic String execute() throws Exception {\n\t\tSystem.out.println(\"username:\" + this.getUser().getUsername());\n\t\tSystem.out.println(\"password:\" + this.getUser().getPassword());\n\n\t\treturn SUCCESS;\n\t}\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224728-51rwfao",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224728-51rwfao",
				"updated": "20221101224839"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "类型转换器 UserConverter2.java",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224812-huyyii5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "amF2YQ==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221101224812-huyyii5",
				"updated": "20221101224831"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package space.terwer.converter;\n\nimport java.util.Map;\n\nimport org.apache.struts2.util.StrutsTypeConverter;\n\nimport space.terwer.bean.User;\n\npublic class UserConverter2 extends StrutsTypeConverter {\n\n\t@Override\n\tpublic Object convertFromString(Map context, String[] values, Class toClass) {\n\t\tString firstValue = values[0];\n\n\t\tString[] st = firstValue.split(\";\");\n\n\t\tString uername = st[0];\n\t\tString password = st[1];\n\n\t\tUser user = new User();\n\t\tuser.setUsername(uername);\n\t\tuser.setPassword(password);\n\n\t\treturn user;\n\t}\n\n\t@Override\n\tpublic String convertToString(Map context, Object o) {\n\t\tUser user = (User) o;\n\n\t\tString username = user.getUsername();\n\t\tString password = user.getPassword();\n\n\t\tString userInfo = \"Use StrutsTypeConverter converted from UserConverter2=\u003eusername: \" + username\n\t\t\t\t+ \", password: \" + password;\n\t\treturn userInfo;\n\t}\n\n}\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224844-sbhp2kx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224844-sbhp2kx",
				"updated": "20221101224910"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "类型转换配置 UserAction-conversion.properties",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224912-0edzfvd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "cHJvcGVydGllcw==",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221101224912-0edzfvd",
				"updated": "20221101224921"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "cHJvcGVydGllcw==",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "user=space.terwer.converter.UserConverter2\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224908-xcdpt1x",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224908-xcdpt1x",
				"updated": "20221101224936"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "结果展示 output.jsp",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224938-z6ax4gg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"CodeBlockFenceChar": 96,
			"CodeBlockFenceLen": 3,
			"CodeBlockOpenFence": "YGBg",
			"CodeBlockInfo": "eG1s",
			"CodeBlockCloseFence": "YGBg",
			"Properties": {
				"id": "20221101224938-z6ax4gg",
				"updated": "20221101224950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%\u003e\n\u003c%@ taglib prefix=\"s\" uri=\"/struts-tags\" %\u003e  \n  \n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n\u003cmeta charset=\"UTF-8\"\u003e\n\u003ctitle\u003eStruts2.3 converter result\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\t\u003cs:property value=\"user\"/\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```",
					"CodeBlockFenceLen": 3,
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101224951-1ijp5e7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101224951-1ijp5e7",
				"updated": "20221101224957"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "实际效果",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101225054-hgjrr0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221101225054-hgjrr0y",
				"updated": "20221101225055"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Properties": {
						"id": ""
					},
					"Children": [
						{
							"Type": "NodeBang",
							"Data": "!",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenBracket",
							"Data": "[",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseBracket",
							"Data": "]",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeOpenParen",
							"Data": "(",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://img1.terwer.space/api/public/20221101225045.png",
							"Properties": {
								"id": ""
							}
						},
						{
							"Type": "NodeCloseParen",
							"Data": ")",
							"Properties": {
								"id": ""
							}
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101230936-9goyoso",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221101230936-9goyoso",
				"updated": "20221101230948"
			},
			"Children": [
				{
					"Type": "NodeHeadingC8hMarker",
					"Data": "### ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": "总结",
					"Properties": {
						"id": ""
					}
				}
			]
		},
		{
			"ID": "20221101230948-letw1am",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221101230948-letw1am",
				"updated": "20221101231350"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "Struts2"
				},
				{
					"Type": "NodeText",
					"Data": "​ 框架自带的类型转换器 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "StrutsTypeConverter"
				},
				{
					"Type": "NodeText",
					"Data": "​ 简化类型转换代码的编写，",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "StrutsTypeConverter"
				},
				{
					"Type": "NodeText",
					"Data": "​ 类继承于 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "DefaultTypeConverter"
				},
				{
					"Type": "NodeText",
					"Data": "​ 父类，并且提供了两个抽象方法： ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "convertFromString"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": ""
					},
					"TextMarkType": "code",
					"TextMarkTextContent": "convertToString"
				},
				{
					"Type": "NodeText",
					"Data": "​ ，分别表示 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color4);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "从页面额字符串转换为后台对象"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color4);\"}",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": " 以及 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color4);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "从后台对象转换为页面字符串"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color4);\"}",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": " ，我们 ",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeTextMark",
					"Properties": {
						"id": "",
						"style": "color: var(--b3-font-color1);"
					},
					"TextMarkType": "strong text",
					"TextMarkTextContent": "只需要实现这两个抽象方法即可实现类型转换"
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"color: var(--b3-font-color1);\"}",
					"Properties": {
						"id": ""
					}
				},
				{
					"Type": "NodeText",
					"Data": " 。",
					"Properties": {
						"id": ""
					}
				}
			]
		}
	]
}